// document.addEventListener("DOMContentLoaded", function() {
//   if (document.querySelectorAll(".aboutUs").length > 0) {
//     let dropDown = Array.from(document.querySelectorAll(".awards__arrow"));
//     dropDown.forEach(function(elem, index) {
//       elem.addEventListener("click", function(e) {
//         let list = document.querySelectorAll(".awards__list")[index];
//         list.classList.toggle("active");
//         let arrow = document.querySelectorAll(".awards__arrow")[index];
//         arrow.classList.toggle("rotate");
//         ScrollReveal().sync();
//       });
//     });
//     // ScrollReveal().sync();
//   }
// });
// ie
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll(".aboutUs").length > 0) {
    var dropDown = Array.from(document.querySelectorAll(".awards__arrow"));
    dropDown.forEach(function (elem, index) {
      elem.addEventListener("click", function (e) {
        var list = document.querySelectorAll(".awards__list")[index];
        list.classList.toggle("active");
        var arrow = document.querySelectorAll(".awards__arrow")[index];
        arrow.classList.toggle("rotate");
        ScrollReveal().sync();
      });
    }); // ScrollReveal().sync();
  }
});
// document.addEventListener("DOMContentLoaded", function () {
//   (function ($) {
//     $(function () {
//       $('.header-nav__burger').on('click', function () {
//         $(this).closest('.header-nav').toggleClass('state_open');
//       });
//     });
//   })(jQuery);
//   let burger = document.querySelector(".header-nav__burger");
//   burger.addEventListener("click", function () {
//     burger.classList.toggle("toggle");
//   });
//   let header = $("header");
//       scrollPrev = 0;
//   $(window).scroll(function() {
//     let scrolled = $(window).scrollTop();
//     if ( scrolled > 100 && scrolled > scrollPrev ) {
//       header.addClass('out');
//     } else {
//       header.removeClass('out');
//     }
//     scrollPrev = scrolled;
//   })
// });
// ie
// document.addEventListener("DOMContentLoaded", function () {
//   (function ($) {
//     $(function () {
//       $('.header-nav__burger').on('click', function () {
//         $(this).closest('.header-nav').toggleClass('state_open');
//       });
//     });
//   })(jQuery);
//   var burger = document.querySelector(".header-nav__burger");
//   burger.addEventListener("click", function () {
//     burger.classList.toggle("toggle");
//   });
//   var header = $("header");
//   scrollPrev = 0;
//   $(window).scroll(function () {
//     var scrolled = $(window).scrollTop();
//     if (scrolled > 100 && scrolled > scrollPrev) {
//       header.addClass('out');
//     } else {
//       header.removeClass('out');
//     }
//     scrollPrev = scrolled;
//   });
// });
// document.addEventListener("DOMContentLoaded", function () {
//   (function ($) {
//     $(function () {
//       $('.header-nav__burger').on('click', function () {
//         $(this).closest('.header-nav').toggleClass('state_open');
//       });
//     });
//   })(jQuery);
//   let burger = document.querySelector(".header-nav__burger");
//   burger.addEventListener("click", function () {
//     burger.classList.toggle("toggle");
//   });
//   let header = $("header");
//       scrollPrev = 0;
//   $(window).scroll(function() {
//     let scrolled = $(window).scrollTop();
//     if ( scrolled > 100 && scrolled > scrollPrev ) {
//       header.addClass('out');
//     } else {
//       header.removeClass('out');
//     }
//     scrollPrev = scrolled;
//   })
// });
// ie
document.addEventListener("DOMContentLoaded", function () {
  (function ($) {
    $(function () {
      $(".header-nav__burger").on("click", function () {
        $(this).closest(".header-nav").toggleClass("state_open");
      });
    });
  })(jQuery);

  var burger = document.querySelector(".header-nav__burger");
  burger.addEventListener("click", function () {
    burger.classList.toggle("toggle");
  });
  var header = $("header");
  scrollPrev = 0;
  $(window).scroll(function () {
    var scrolled = $(window).scrollTop();

    if (document.querySelector(".state_open")) {
      return;
    } else if (scrolled > 100 && scrolled > scrollPrev) {
      header.addClass("out");
    } else {
      header.removeClass("out");
    }

    scrollPrev = scrolled;
  });
});
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll(".contacts-page").length > 0) {
    var getCoords = function getCoords(elem) {
      var box = elem.getBoundingClientRect();
      return {
        top: box.top + pageYOffset,
        left: box.left + pageXOffset
      };
    };

    var cards = Array.from(document.querySelectorAll('.main-offices-list__item-card'));
    var answ = document.querySelector('.main-callback-answ');
    var lastCard = cards[cards.length - 1];
    console.log(lastCard);
    var cardX = getCoords(lastCard).left + lastCard.offsetWidth;
    var cardY = getCoords(lastCard).top + lastCard.offsetHeight;
    var answX = getCoords(answ).left;
    var answY = getCoords(answ).top;

    if (answX <= cardX && answY <= cardY) {
      document.querySelector('.main-offices').style.paddingBottom = "140px";
    }
  }
}); // ie

document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".homepage")) {
    var banner = document.querySelector(".banner-slider__item");
    banner.style.paddingTop = "120px";
    var img = Array.from(banner.querySelectorAll("img.down"));
    img.map(function (e) {
      e.classList.remove("down");
    });
  }
}); // anchor

$(document).ready(function () {
  $("[href='#anchor']").on("click", function (event) {
    event.preventDefault();
    var id = $(this).attr('href'),
        top = $(id).offset().top;
    $('body,html').animate({
      scrollTop: top
    }, 1000);
  });
});
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.CanvasNest = t();
}(this, function () {
  "use strict";

  function e(e) {
    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e["default"] : e;
  }

  function t(e, t) {
    return e(t = {
      exports: {}
    }, t.exports), t.exports;
  }

  var n = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = 1;
    t["default"] = function () {
      return "" + n++;
    }, e.exports = t["default"];
  });
  e(n);
  var o = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t["default"] = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30,
          n = null;
      return function () {
        for (var o = this, i = arguments.length, r = Array(i), a = 0; a < i; a++) {
          r[a] = arguments[a];
        }

        clearTimeout(n), n = setTimeout(function () {
          e.apply(o, r);
        }, t);
      };
    }, e.exports = t["default"];
  });
  e(o);
  var i = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    t.SizeSensorId = "size-sensor-id", t.SensorStyle = "display:block;position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;opacity:0", t.SensorClassName = "size-sensor-object";
  });
  e(i);
  i.SizeSensorId, i.SensorStyle, i.SensorClassName;
  var r = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.createSensor = void 0;
    var n,
        r = (n = o) && n.__esModule ? n : {
      "default": n
    };

    t.createSensor = function (e) {
      var t = void 0,
          n = [],
          o = (0, r["default"])(function () {
        n.forEach(function (t) {
          t(e);
        });
      }),
          a = function a() {
        t && t.parentNode && (t.contentDocument.defaultView.removeEventListener("resize", o), t.parentNode.removeChild(t), t = void 0, n = []);
      };

      return {
        element: e,
        bind: function bind(r) {
          t || (t = function () {
            "static" === getComputedStyle(e).position && (e.style.position = "relative");
            var t = document.createElement("object");
            return t.onload = function () {
              t.contentDocument.defaultView.addEventListener("resize", o), o();
            }, t.setAttribute("style", i.SensorStyle), t.setAttribute("class", i.SensorClassName), t.type = "text/html", e.appendChild(t), t.data = "about:blank", t;
          }()), -1 === n.indexOf(r) && n.push(r);
        },
        destroy: a,
        unbind: function unbind(e) {
          var o = n.indexOf(e);
          -1 !== o && n.splice(o, 1), 0 === n.length && t && a();
        }
      };
    };
  });
  e(r);
  r.createSensor;
  var a = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.createSensor = void 0;
    var n,
        i = (n = o) && n.__esModule ? n : {
      "default": n
    };

    t.createSensor = function (e) {
      var t = void 0,
          n = [],
          o = (0, i["default"])(function () {
        n.forEach(function (t) {
          t(e);
        });
      }),
          r = function r() {
        t.disconnect(), n = [], t = void 0;
      };

      return {
        element: e,
        bind: function bind(i) {
          t || (t = function () {
            var t = new ResizeObserver(o);
            return t.observe(e), o(), t;
          }()), -1 === n.indexOf(i) && n.push(i);
        },
        destroy: r,
        unbind: function unbind(e) {
          var o = n.indexOf(e);
          -1 !== o && n.splice(o, 1), 0 === n.length && t && r();
        }
      };
    };
  });
  e(a);
  a.createSensor;
  var s = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.createSensor = void 0;
    t.createSensor = "undefined" != typeof ResizeObserver ? a.createSensor : r.createSensor;
  });
  e(s);
  s.createSensor;
  var u = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.removeSensor = t.getSensor = void 0;
    var o,
        r = (o = n) && o.__esModule ? o : {
      "default": o
    };
    var a = {};
    t.getSensor = function (e) {
      var t = e.getAttribute(i.SizeSensorId);
      if (t && a[t]) return a[t];
      var n = (0, r["default"])();
      e.setAttribute(i.SizeSensorId, n);
      var o = (0, s.createSensor)(e);
      return a[n] = o, o;
    }, t.removeSensor = function (e) {
      var t = e.element.getAttribute(i.SizeSensorId);
      e.element.removeAttribute(i.SizeSensorId), e.destroy(), t && a[t] && delete a[t];
    };
  });
  e(u);
  u.removeSensor, u.getSensor;
  var c = t(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.clear = t.bind = void 0;
    t.bind = function (e, t) {
      var n = (0, u.getSensor)(e);
      return n.bind(t), function () {
        n.unbind(t);
      };
    }, t.clear = function (e) {
      var t = (0, u.getSensor)(e);
      (0, u.removeSensor)(t);
    };
  });
  e(c);

  var l = c.clear,
      d = c.bind,
      f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (e) {
    return window.setTimeout(e, 1e3 / 60);
  },
      v = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame || window.clearTimeout,
      m = function m(e) {
    return new Array(e).fill(0).map(function (e, t) {
      return t;
    });
  },
      h = Object.assign || function (e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];

      for (var o in n) {
        Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
      }
    }

    return e;
  },
      p = function () {
    function e(e, t) {
      for (var n = 0; n < t.length; n++) {
        var o = t[n];
        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
      }
    }

    return function (t, n, o) {
      return n && e(t.prototype, n), o && e(t, o), t;
    };
  }();

  var y = function () {
    function e(t, n) {
      var o = this;
      !function (e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
      }(this, e), this.randomPoints = function () {
        return m(o.c.count).map(function () {
          return {
            x: Math.random() * o.canvas.width,
            y: Math.random() * o.canvas.height,
            xa: 2 * Math.random() - 1,
            ya: 2 * Math.random() - 1,
            max: 6e3
          };
        });
      }, this.el = t, this.c = h({
        zIndex: -1,
        opacity: .5,
        color: "0,0,0",
        pointColor: "0,0,0",
        count: 99
      }, n), this.canvas = this.newCanvas(), this.context = this.canvas.getContext("2d"), this.points = this.randomPoints(), this.current = {
        x: null,
        y: null,
        max: 2e4
      }, this.all = this.points.concat([this.current]), this.bindEvent(), this.requestFrame(this.drawCanvas);
    }

    return p(e, [{
      key: "bindEvent",
      value: function value() {
        var e = this;
        d(this.el, function () {
          e.canvas.width = e.el.clientWidth, e.canvas.height = e.el.clientHeight;
        }), this.onmousemove = window.onmousemove, window.onmousemove = function (t) {
          e.current.x = t.clientX - e.el.offsetLeft + document.scrollingElement.scrollLeft, e.current.y = t.clientY - e.el.offsetTop + document.scrollingElement.scrollTop, e.onmousemove && e.onmousemove(t);
        }, this.onmouseout = window.onmouseout, window.onmouseout = function () {
          e.current.x = null, e.current.y = null, e.onmouseout && e.onmouseout();
        };
      }
    }, {
      key: "newCanvas",
      value: function value() {
        "static" === getComputedStyle(this.el).position && (this.el.style.position = "relative");
        var e,
            t = document.createElement("canvas");
        return t.style.cssText = "display:block;position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:" + (e = this.c).zIndex + ";opacity:" + e.opacity, t.width = this.el.clientWidth, t.height = this.el.clientHeight, this.el.appendChild(t), t;
      }
    }, {
      key: "requestFrame",
      value: function value(e) {
        var t = this;
        this.tid = f(function () {
          return e.call(t);
        });
      }
    }, {
      key: "drawCanvas",
      value: function value() {
        var e = this,
            t = this.context,
            n = this.canvas.width,
            o = this.canvas.height,
            i = this.current,
            r = this.points,
            a = this.all;
        t.clearRect(0, 0, n, o);
        var s = void 0,
            u = void 0,
            c = void 0,
            l = void 0,
            d = void 0,
            f = void 0;
        r.forEach(function (r, v) {
          for (r.x += r.xa, r.y += r.ya, r.xa *= r.x > n || r.x < 0 ? -1 : 1, r.ya *= r.y > o || r.y < 0 ? -1 : 1, t.fillStyle = "rgba(" + e.c.pointColor + ")", t.fillRect(r.x - .5, r.y - .5, 1, 1), u = v + 1; u < a.length; u++) {
            null !== (s = a[u]).x && null !== s.y && (l = r.x - s.x, d = r.y - s.y, (f = l * l + d * d) < s.max && (s === i && f >= s.max / 2 && (r.x -= .03 * l, r.y -= .03 * d), c = (s.max - f) / s.max, t.beginPath(), t.lineWidth = c / 2, t.strokeStyle = "rgba(" + e.c.color + "," + (c + .2) + ")", t.moveTo(r.x, r.y), t.lineTo(s.x, s.y), t.stroke()));
          }
        }), this.requestFrame(this.drawCanvas);
      }
    }, {
      key: "destroy",
      value: function value() {
        l(this.el), window.onmousemove = this.onmousemove, window.onmouseout = this.onmouseout, v(this.tid), this.canvas.parentNode.removeChild(this.canvas);
      }
    }]), e;
  }();

  return y.version = "2.0.4", y;
});
// document.addEventListener("DOMContentLoaded", function() {
//   if (document.querySelectorAll(".casecards").length > 0) {
//     $(".case-filter-block__list").on("click", function(event) {
//       if (document.querySelector(".active")) {
//         if (
//           event.target.parentElement.childNodes[2].classList.contains("active")
//         ) {
//           event.target.parentElement.childNodes[2].classList.remove("active");
//         } else {
//           document.querySelector(".active").classList.remove("active");
//           event.target.parentElement.childNodes[2].classList.add("active");
//         }
//       } else {
//         event.target.parentElement.childNodes[2].classList.add("active");
//       }
//     });
//   }
//   if (document.querySelectorAll(".careers-page").length > 0) {
//     var dropDown = [];
//     for ( let i = 0; i < document.querySelectorAll(".careers-filter-block__list").length; i++ ) {
//       dropDown.push(document.querySelectorAll(".careers-filter-block__list")[i]);
//     }
//     dropDown.forEach(function(elem, index) {
//       elem.addEventListener("click", function(e) {
//         let list = document.querySelectorAll(".careers-filter-block__list-insert")[ index ];
//         list.classList.toggle("active");
//       });
//     });
//   }
// });
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll(".casecards").length > 0) {
    var dropDown = [];

    for (var i = 0; i < document.querySelectorAll(".case-filter-block__list").length; i++) {
      dropDown.push(document.querySelectorAll(".case-filter-block__list")[i]);
    }

    dropDown.forEach(function (elem, index) {
      elem.addEventListener("click", function (e) {
        var list = document.querySelectorAll(".case-filter-block__list-insert")[index];
        if (document.querySelector(".active")) document.querySelector(".active").classList.remove("active");else list.classList.add("active");
      });
    }); // $(".case-filter-block__list").on("click", function(event) {
    //   if (document.querySelector(".active")) {
    //     if (
    //       event.target.parentElement.childNodes[2].classList.contains("active")
    //     ) {
    //       event.target.parentElement.childNodes[2].classList.remove("active");
    //     } else {
    //       document.querySelector(".active").classList.remove("active");
    //       event.target.parentElement.childNodes[2].classList.add("active");
    //     }
    //   } else {
    //     event.target.parentElement.childNodes[2].classList.add("active");
    //   }
    // });
  }

  if (document.querySelectorAll(".careers-page").length > 0) {
    var dropDown = [];

    for (var _i = 0; _i < document.querySelectorAll(".case-filter-block__list").length; _i++) {
      dropDown.push(document.querySelectorAll(".case-filter-block__list")[_i]);
    }

    dropDown.forEach(function (elem, index) {
      elem.addEventListener("click", function (e) {
        var list = document.querySelectorAll(".case-filter-block__list-insert")[index]; // if (document.querySelector(".active"))
        //   document.querySelector(".active").classList.remove("active");

        list.classList.toggle("active");
      });
    });
  }
});
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll(".casecards").length > 0 && !document.querySelector(".casecards.intern")) {
    // #### FILTER FEATURE (Case Studies)
    if ($("body").hasClass("page-template-page-casestudies-php") || $("main").hasClass("casecards")) {
      var startFilter = function startFilter() {
        jQuery('#filter_list .filterDiv').each(function (index) {
          jQuery(this).addClass('show');
        });
      };

      var updateFilter = function updateFilter() {
        var filter = [];
        filter.push(jQuery('.case-filter #filter_1 .filter1_active').data("filter1"));
        filter.push(jQuery('.case-filter #filter_2 .filter2_active').data("filter2"));
        filter.push(jQuery('.case-filter #filter_3 .filter3_active').data("filter3"));
        console.log(filter[0], filter[1], filter[2]);
        jQuery('#filter_list .filterDiv').each(function (index) {
          jQuery(this).removeClass('show');

          if (filter[0] === jQuery(this).data("filter1") && filter[1] === jQuery(this).data("filter2") && filter[2] === jQuery(this).data("filter3") || filter[0] === 'all' && filter[1] === jQuery(this).data("filter2") && filter[2] === jQuery(this).data("filter3") || filter[0] === jQuery(this).data("filter1") && filter[1] === 'all' && filter[2] === jQuery(this).data("filter3") || filter[0] === jQuery(this).data("filter1") && filter[1] === jQuery(this).data("filter2") && filter[2] === 'all' || filter[0] === 'all' && filter[1] === 'all' && filter[2] === jQuery(this).data("filter3") || filter[0] === jQuery(this).data("filter1") && filter[1] === 'all' && filter[2] === 'all' || filter[0] === 'all' && filter[1] === jQuery(this).data("filter2") && filter[2] === 'all' || filter[0] === 'all' && filter[1] === 'all' && filter[2] === 'all') {
            jQuery(this).addClass('show');
          }
        });
      };

      var mbtnContainer = document.getElementById("filter_1");
      var mbtns = mbtnContainer.getElementsByClassName("case-filter-block__item-insert");

      for (var i = 0; i < mbtns.length; i++) {
        mbtns[i].addEventListener("click", function () {
          var current = document.getElementsByClassName("filter1_active");
          current[0].className = current[0].className.replace(" filter1_active", "");
          this.className += " filter1_active";
        });
      }

      var sbtnContainer = document.getElementById("filter_2");
      var sbtns = sbtnContainer.getElementsByClassName("case-filter-block__item-insert");

      for (var i = 0; i < sbtns.length; i++) {
        sbtns[i].addEventListener("click", function () {
          var current = document.getElementsByClassName("filter2_active");
          current[0].className = current[0].className.replace(" filter2_active", "");
          this.className += " filter2_active";
        });
      }

      var sbtnContainer = document.getElementById("filter_3");
      var sbtns = sbtnContainer.getElementsByClassName("case-filter-block__item-insert");

      for (var i = 0; i < sbtns.length; i++) {
        sbtns[i].addEventListener("click", function () {
          var current = document.getElementsByClassName("filter3_active");
          current[0].className = current[0].className.replace(" filter3_active", "");
          this.className += " filter3_active";
        });
      }

      var filter = [];
      startFilter();
      jQuery('.case-filter #filter_1 .case-filter-block__item-insert').on("click", function () {
        var filter = [];
        filter.push(jQuery('.case-filter #filter_1 .filter1_active').data("filter1"));
        filter.push(jQuery('.case-filter #filter_2 .filter2_active').data("filter2"));
        filter.push(jQuery('.case-filter #filter_3 .filter3_active').data("filter3")); // console.log(filter);

        var active_text = $(".filter1_active").text(),
            image = $(".case-filter__arrow"),
            image_src = image[0].src;
        $(".case-filter_title1").html(active_text + "<img class=\"case-filter__arrow\" src=" + image_src + ">");
        updateFilter();
      });
      jQuery('.case-filter #filter_2 .case-filter-block__item-insert').on("click", function () {
        var filter = [];
        filter.push(jQuery('.case-filter #filter_1 .filter1_active').data("filter1"));
        filter.push(jQuery('.case-filter #filter_2 .filter2_active').data("filter2"));
        filter.push(jQuery('.case-filter #filter_3 .filter3_active').data("filter3")); // console.log(filter);

        var active_text = $(".filter2_active").text(),
            image = $(".case-filter__arrow"),
            image_src = image[0].src;
        $(".case-filter_title2").html(active_text + "<img class=\"case-filter__arrow\" src=" + image_src + ">");
        updateFilter();
      });
      jQuery('.case-filter #filter_3 .case-filter-block__item-insert').on("click", function () {
        var filter = [];
        filter.push(jQuery('.case-filter #filter_1 .filter1_active').data("filter1"));
        filter.push(jQuery('.case-filter #filter_2 .filter2_active').data("filter2"));
        filter.push(jQuery('.case-filter #filter_3 .filter3_active').data("filter3")); // console.log(filter);

        var active_text = $(".filter3_active").text(),
            image = $(".case-filter__arrow"),
            image_src = image[0].src;
        $(".case-filter_title3").html(active_text + "<img class=\"case-filter__arrow\" src=" + image_src + ">");
        updateFilter();
      });
    } // #### Click function on Filters


    $(".case-filter-block__item").click(function (event) {
      if (!jQuery(event.target).closest("li.case-filter-block__item-insert").length) {
        $('ul.case-filter-block__list-insert').removeClass("active");
        $(this).find('ul.case-filter-block__list-insert').addClass("active");
      }
    });
    $(".case-filter-block__item-insert").click(function () {
      $(this).parent().removeClass("active");
    });
  }

  if (document.querySelectorAll(".careers-page").length > 0) {
    // #### FILTER FEATURE (Careers)
    if ($("body").hasClass("page-template-page-careers-php") || $("main").hasClass('careers-page')) {
      var _startFilter = function _startFilter() {
        jQuery('.works .works-card').each(function (index) {
          jQuery(this).addClass('show');
        });
      };

      var _updateFilter = function _updateFilter() {
        var filter = [];
        filter.push(jQuery('#filter_careers .filterCareers_active').data("careers1"));
        console.log(filter[0]);
        jQuery('.works .works-card').each(function (index) {
          jQuery(this).removeClass('show');

          if (filter[0] === jQuery(this).data("careers1") || filter[0] === 'all') {
            jQuery(this).addClass('show');
          }
        });
      };

      var mbtnContainer = document.getElementById("filter_careers");
      var mbtns = mbtnContainer.getElementsByClassName("careers-filter-block__item-insert");

      for (var i = 0; i < mbtns.length; i++) {
        mbtns[i].addEventListener("click", function () {
          var current = document.getElementsByClassName("filterCareers_active");
          current[0].className = current[0].className.replace(" filterCareers_active", "");
          this.className += " filterCareers_active";
        });
      }

      var filter = [];

      _startFilter();

      jQuery(' #filter_careers .careers-filter-block__item-insert ').on("click", function () {
        var filter = [];
        filter.push(jQuery('#filter_careers .filterCareers_active').data("careers1")); // console.log(filter);

        var active_text = $(".filterCareers_active").text(),
            image = $(".careers-filter__arrow"),
            image_src = image[0].src;
        $(".careers-filter-block__list").html(active_text + "<img class=\"careers-filter__arrow\" src=" + image_src + ">");

        _updateFilter();
      });
    }

    $("#filter_careers").click(function () {
      $(this).find("ul.careers-filter-block__list-insert").toggleClass("active");
    });
  }
});
// document.addEventListener("DOMContentLoaded",function() {
//     if(document.querySelector(".homepage")) {
//         let banner = document.querySelector(".banner-slider__item");
//         banner.style.paddingTop = "120px";
//         let img =Array.from(banner.querySelectorAll("img.down"));
//         img.map((e)=> {
//             e.classList.remove("down")
//         })
//     }
// });
// // anchor
// $(document).ready(function(){
//     $("[href='#anchor']").on("click", function (event) {
//         event.preventDefault();
//         var id  = $(this).attr('href'),
//             top = $(id).offset().top;
//         $('body,html').animate({scrollTop: top}, 1000);
//     });
// });
// ie
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".homepage")) {
    var banner = document.querySelector(".banner-slider__item");

    if (window.matchMedia("(min-width: 481px)").matches) {
      banner.style.paddingTop = "120px";
    }

    if (window.matchMedia("(max-width: 480px)").matches) {
      banner.style.paddingTop = "85px";
    }

    var img = Array.from(banner.querySelectorAll("img.down"));
    img.map(function (e) {
      e.classList.remove("down");
    });
  }
}); // anchor

$(document).ready(function () {
  $("[href='#anchor']").on("click", function (event) {
    event.preventDefault();
    var id = $(this).attr('href'),
        top = $(id).offset().top;
    $('body,html').animate({
      scrollTop: top
    }, 1000);
  });
});
$(window).on('load', function () {
  var $preloader = $('#p_prldr'),
      $svg_anm = $preloader.find('.svg_anm');
  $svg_anm.fadeOut();
  $preloader.delay(500).fadeOut('slow');
});
var xCords = ["171.8", "171.8", "175.5", "179.3", "175.5", "179.3", "183", "186.8", "190.5", "194.3", "183", "186.8", "190.5", "194.3", "194.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "228", "231.8", "228", "235.5", "239.3", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "29.3", "40.5", "44.3", "44.3", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "48", "51.8", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "36.8", "40.5", "44.3", "40.5", "44.3", "33", "40.5", "44.3", "48", "51.8", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "51.8", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "18", "21.8", "25.5", "40.5", "44.3", "40.5", "44.3", "48", "51.8", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "40.5", "44.3", "33", "36.8", "48", "51.8", "119.3", "119.3", "115.5", "119.3", "63", "63", "66.8", "70.5", "74.3", "63", "66.8", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "78", "81.8", "85.5", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "63", "66.8", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "63", "66.8", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "100.5", "104.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "108", "111.8", "115.5", "119.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "63", "66.8", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "63", "63", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "93", "96.8", "96.8", "100.5", "104.3", "100.5", "104.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "100.5", "104.3", "100.5", "104.3", "104.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "111.8", "115.5", "119.3", "115.5", "119.3", "115.5", "119.3", "119.3", "119.3", "119.3", "119.3", "119.3", "119.3", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "145.5", "138", "141.8", "138", "145.5", "149.3", "123", "126.8", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "156.8", "160.5", "164.3", "168", "168", "171.8", "175.5", "179.3", "179.3", "168", "171.8", "171.8", "179.3", "153", "160.5", "164.3", "160.5", "164.3", "153", "153", "160.5", "164.3", "164.3", "168", "175.5", "179.3", "175.5", "179.3", "171.8", "171.8", "175.5", "179.3", "175.5", "123", "130.5", "134.3", "134.3", "123", "126.8", "123", "126.8", "130.5", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "153", "153", "156.8", "160.5", "153", "156.8", "153", "156.8", "160.5", "160.5", "164.3", "171.8", "171.8", "175.5", "168", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "168", "171.8", "168", "171.8", "175.5", "175.5", "179.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "183", "186.8", "183", "194.3", "190.5", "194.3", "186.8", "190.5", "194.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "201.8", "183", "186.8", "190.5", "194.3", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "198", "201.8", "198", "201.8", "205.5", "205.5", "209.3", "216.8", "224.3", "220.5", "224.3", "216.8", "220.5", "224.3", "220.5", "224.3", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "183", "186.8", "190.5", "194.3", "183", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "198", "205.5", "209.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "183", "190.5", "194.3", "205.5", "209.3", "198", "205.5", "213", "216.8", "213", "216.8", "220.5", "220.5", "224.3", "213", "216.8", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "231.8", "235.5", "228", "228", "183", "205.5", "209.3", "205.5", "209.3", "205.5", "209.3", "209.3", "183", "186.8", "183", "186.8", "190.5", "190.5", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "209.3", "205.5", "209.3", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "213", "216.8", "213", "216.8", "220.5", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "228", "231.8", "228", "231.8", "235.5", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "183", "186.8", "183", "190.5", "194.3", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "201.8", "201.8", "205.5", "209.3", "205.5", "209.3", "183", "186.8", "183", "186.8", "194.3", "190.5", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "198", "209.3", "205.5", "209.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "239.3", "228", "228", "231.8", "235.5", "235.5", "213", "216.8", "213", "216.8", "213", "228", "269.3", "243", "246.8", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "273", "276.8", "280.5", "284.3", "288", "291.8", "295.5", "299.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "303", "303", "306.8", "303", "306.8", "310.5", "314.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "318", "321.8", "325.5", "329.3", "318", "321.8", "318", "325.5", "389.3", "393", "396.8", "400.5", "434.3", "438", "441.8", "441.8", "445.5", "453", "456.8", "456.8", "464.3", "468", "471.8", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "243", "246.8", "246.8", "250.5", "254.3", "250.5", "254.3", "246.8", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "250.5", "254.3", "250.5", "254.3", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "250.5", "254.3", "254.3", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "288", "295.5", "299.3", "273", "276.8", "273", "280.5", "284.3", "273", "273", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "243", "246.8", "243", "243", "246.8", "243", "246.8", "250.5", "250.5", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "303", "306.8", "303", "306.8", "310.5", "303", "306.8", "303", "306.8", "310.5", "303", "306.8", "306.8", "314.3", "310.5", "314.3", "310.5", "314.3", "318", "318", "321.8", "318", "344.3", "340.5", "344.3", "359.3", "359.3", "348", "336.8", "344.3", "344.3", "333", "336.8", "333", "344.3", "340.5", "344.3", "348", "348", "351.8", "348", "359.3", "355.5", "359.3", "344.3", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "348", "351.8", "348", "370.5", "374.3", "374.3", "378", "381.8", "381.8", "385.5", "385.5", "378", "381.8", "381.8", "389.3", "393", "396.8", "393", "393", "396.8", "385.5", "389.3", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "374.3", "374.3", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "385.5", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "370.5", "374.3", "374.3", "378", "381.8", "378", "381.8", "385.5", "378", "381.8", "378", "381.8", "366.8", "366.8", "370.5", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "393", "400.5", "404.3", "404.3", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "363", "366.8", "370.5", "374.3", "374.3", "366.8", "374.3", "381.8", "378", "385.5", "389.3", "389.3", "381.8", "378", "389.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "411.8", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "400.5", "393", "393", "404.3", "400.5", "404.3", "411.8", "415.5", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "449.3", "449.3", "464.3", "468", "471.8", "475.5", "479.3", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "453", "456.8", "453", "468", "479.3", "423", "434.3", "434.3", "449.3", "441.8", "438", "441.8", "449.3", "445.5", "449.3", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "453", "456.8", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "479.3", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "445.5", "449.3", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "438", "449.3", "438", "441.8", "438", "441.8", "445.5", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "55.5", "59.3", "123", "126.8", "126.8", "130.5", "134.3", "130.5", "134.3", "130.5", "134.3", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "141.8", "145.5", "149.3", "145.5", "149.3", "134.3", "141.8", "138", "145.5", "149.3", "145.5", "149.3", "141.8", "149.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "179.3", "168", "168", "153", "156.8", "156.8", "160.5", "164.3", "160.5", "164.3", "160.5", "164.3", "168", "168", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "179.3", "179.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "198", "201.8", "198", "183", "194.3", "198", "198", "198", "186.8", "183", "186.8", "183", "183", "186.8", "190.5", "198", "201.8", "205.5", "209.3", "205.5", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "194.3", "209.3", "201.8", "198", "209.3", "205.5", "209.3", "216.8", "220.5", "224.3", "228", "213", "216.8", "220.5", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "235.5", "239.3", "205.5", "209.3", "205.5", "209.3", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "201.8", "205.5", "209.3", "205.5", "209.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "205.5", "209.3", "209.3", "209.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "220.5", "224.3", "220.5", "224.3", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "216.8", "220.5", "224.3", "220.5", "224.3", "216.8", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "216.8", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "209.3", "209.3", "209.3", "209.3", "209.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "228", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "220.5", "228", "239.3", "213", "216.8", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "243", "246.8", "243", "246.8", "250.5", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "273", "276.8", "280.5", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "273", "276.8", "273", "276.8", "280.5", "273", "276.8", "273", "276.8", "273", "276.8", "273", "273", "325.5", "329.3", "321.8", "325.5", "329.3", "325.5", "329.3", "340.5", "340.5", "344.3", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "318", "321.8", "321.8", "325.5", "329.3", "325.5", "329.3", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "318", "321.8", "321.8", "325.5", "329.3", "325.5", "329.3", "325.5", "329.3", "325.5", "329.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "333", "336.8", "340.5", "344.3", "348", "363", "366.8", "363", "366.8", "370.5", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "389.3", "389.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "404.3", "393", "396.8", "400.5", "404.3", "408", "411.8", "415.5", "419.3", "419.3", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "419.3", "408", "411.8", "408", "411.8", "419.3", "415.5", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "366.8", "370.5", "374.3", "370.5", "374.3", "374.3", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "374.3", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "374.3", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "408", "411.8", "408", "411.8", "415.5", "415.5", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "438", "441.8", "445.5", "449.3", "449.3", "438", "441.8", "438", "441.8", "445.5", "445.5", "449.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "456.8", "453", "456.8", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "475.5", "479.3", "479.3", "426.8", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "430.5", "434.3", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "423", "426.8", "423", "426.8", "434.3", "430.5", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "445.5", "438", "441.8", "438", "441.8", "445.5", "453", "456.8", "453", "456.8", "460.5", "453", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "438", "441.8", "438", "423", "426.8", "423", "423", "423", "423", "423", "426.8", "423", "426.8", "423", "434.3", "441.8", "441.8", "438", "441.8", "434.3", "434.3", "434.3", "434.3", "438", "441.8", "438", "441.8", "438", "438", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "258", "258", "258", "243", "246.8", "246.8", "250.5", "243", "243", "280.5", "284.3", "378", "381.8", "381.8", "385.5", "389.3", "385.5", "389.3", "381.8", "385.5", "389.3", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "408", "393", "483", "483", "486.8", "490.5", "494.3", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "524.3", "524.3", "528", "528", "531.8", "535.5", "528", "531.8", "535.5", "528", "531.8", "539.3", "535.5", "539.3", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "543", "546.8", "543", "546.8", "550.5", "554.3", "558", "561.8", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "588", "591.8", "610.5", "614.3", "606.8", "610.5", "614.3", "614.3", "610.5", "614.3", "618", "621.8", "629.3", "618", "618", "621.8", "625.5", "629.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "603", "606.8", "603", "606.8", "610.5", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "618", "618", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "588", "588", "591.8", "603", "606.8", "603", "606.8", "610.5", "610.5", "603", "606.8", "603", "606.8", "618", "618", "618", "621.8", "603", "614.3", "614.3", "614.3", "610.5", "614.3", "618", "621.8", "633", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "648", "651.8", "655.5", "659.3", "648", "651.8", "648", "651.8", "655.5", "659.3", "655.5", "659.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "651.8", "648", "651.8", "655.5", "659.3", "655.5", "659.3", "648", "651.8", "648", "651.8", "655.5", "659.3", "655.5", "659.3", "663", "670.5", "674.3", "663", "666.8", "663", "666.8", "670.5", "674.3", "670.5", "674.3", "678", "685.5", "689.3", "678", "681.8", "678", "681.8", "685.5", "689.3", "685.5", "689.3", "663", "666.8", "663", "666.8", "670.5", "674.3", "670.5", "674.3", "663", "666.8", "663", "666.8", "670.5", "674.3", "670.5", "674.3", "678", "681.8", "678", "681.8", "685.5", "689.3", "685.5", "678", "681.8", "678", "681.8", "685.5", "685.5", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "651.8", "651.8", "655.5", "659.3", "655.5", "659.3", "648", "651.8", "648", "651.8", "655.5", "655.5", "644.3", "644.3", "644.3", "644.3", "648", "651.8", "648", "651.8", "663", "666.8", "670.5", "674.3", "670.5", "693", "696.8", "693", "696.8", "696.8", "700.5", "704.3", "700.5", "704.3", "700.5", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "486.8", "490.5", "494.3", "490.5", "494.3", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "505.5", "490.5", "494.3", "490.5", "494.3", "494.3", "494.3", "498", "498", "498", "501.8", "501.8", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "513", "516.8", "524.3", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "535.5", "539.3", "535.5", "539.3", "535.5", "539.3", "535.5", "535.5", "535.5", "539.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "554.3", "543", "546.8", "543", "546.8", "550.5", "558", "561.8", "558", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "546.8", "531.8", "531.8", "539.3", "535.5", "535.5", "539.3", "539.3", "539.3", "543", "543", "543", "554.3", "554.3", "561.8", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "554.3", "558", "561.8", "565.5", "558", "561.8", "565.5", "569.3", "569.3", "561.8", "565.5", "569.3", "565.5", "569.3", "573", "576.8", "573", "580.5", "573", "576.8", "573", "576.8", "588", "591.8", "588", "595.5", "599.3", "591.8", "595.5", "599.3", "595.5", "573", "576.8", "573", "576.8", "573", "576.8", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "576.8", "576.8", "576.8", "576.8", "580.5", "580.5", "584.3", "573", "584.3", "580.5", "584.3", "588", "584.3", "576.8", "580.5", "588", "588", "595.5", "599.3", "573", "576.8", "573", "580.5", "584.3", "588", "588", "591.8", "599.3", "599.3", "588", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "618", "621.8", "625.5", "625.5", "573", "580.5", "580.5", "584.3", "595.5", "599.3", "588", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "603", "606.8", "603", "603", "606.8", "614.3", "614.3", "618", "625.5", "629.3", "618", "621.8", "618", "621.8", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "633", "633", "640.5", "644.3", "648", "651.8", "633", "659.3", "663", "663", "663", "681.8", "561.8", "565.5", "569.3", "565.5", "569.3", "565.5", "569.3", "569.3", "565.5", "569.3", "569.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "573", "580.5", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "603", "606.8", "606.8", "610.5", "614.3", "610.5", "614.3", "614.3", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "621.8", "625.5", "625.5", "633", "636.8", "633", "636.8", "633", "636.8", "633", "636.8", "633", "674.3", "678", "678", "681.8", "670.5", "674.3", "666.8", "663", "666.8", "670.5", "678", "663", "393", "378", "389.3", "479.3", "576.8", "576.8", "134.3", "171.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "235.5", "239.3", "183", "186.8", "190.5", "209.3", "209.3", "201.8", "205.5", "209.3", "220.5", "224.3", "224.3", "231.8", "228", "231.8", "235.5", "228", "228", "231.8", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "235.5", "228", "231.8", "228", "231.8", "235.5", "235.5", "243", "243", "321.8", "329.3", "325.5", "329.3", "333", "336.8", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "363", "366.8", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "411.8", "415.5", "393", "396.8", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "426.8", "430.5", "434.3", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "453", "456.8", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "475.5", "479.3", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "603", "606.8", "610.5", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "633", "636.8", "640.5", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "648", "651.8", "655.5", "659.3", "648", "651.8", "648", "651.8", "655.5", "659.3", "655.5", "659.3", "663", "666.8", "663", "666.8", "663", "666.8", "44.3", "44.3", "55.5", "59.3", "55.5", "59.3", "48", "48", "51.8", "59.3", "59.3", "74.3", "78", "81.8", "89.3", "85.5", "89.3", "63", "63", "66.8", "74.3", "70.5", "74.3", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "111.8", "115.5", "119.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "63", "66.8", "70.5", "74.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "78", "81.8", "85.5", "89.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "93", "96.8", "100.5", "104.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "108", "111.8", "115.5", "119.3", "123", "126.8", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "145.5", "149.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "175.5", "179.3", "183", "186.8", "190.5", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "205.5", "209.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "198", "201.8", "205.5", "205.5", "209.3", "198", "201.8", "198", "201.8", "205.5", "205.5", "209.3", "213", "216.8", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "235.5", "228", "213", "216.8", "216.8", "220.5", "224.3", "239.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "183", "186.8", "190.5", "194.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "201.8", "205.5", "209.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "228", "231.8", "254.3", "258", "261.8", "265.5", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "295.5", "299.3", "284.3", "284.3", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "250.5", "254.3", "246.8", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "273", "276.8", "284.3", "280.5", "284.3", "273", "276.8", "280.5", "284.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "295.5", "299.3", "303", "306.8", "310.5", "314.3", "321.8", "325.5", "329.3", "318", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "318", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "318", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "333", "336.8", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "303", "306.8", "310.5", "314.3", "318", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "318", "321.8", "325.5", "329.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "355.5", "359.3", "363", "366.8", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "385.5", "389.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "415.5", "419.3", "423", "426.8", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "453", "456.8", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "445.5", "449.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "475.5", "479.3", "483", "486.8", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "505.5", "509.3", "513", "516.8", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "535.5", "539.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "565.5", "569.3", "573", "576.8", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "603", "606.8", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "595.5", "599.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "625.5", "629.3", "633", "636.8", "640.5", "644.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "651.8", "655.5", "659.3", "648", "651.8", "648", "651.8", "655.5", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "651.8", "648", "651.8", "655.5", "655.5", "659.3", "648", "651.8", "648", "655.5", "659.3", "663", "666.8", "663", "666.8", "663", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "633", "636.8", "640.5", "644.3", "648", "648", "651.8", "648", "651.8", "655.5", "25.5", "29.3", "14.3", "14.3", "14.3", "18", "21.8", "25.5", "29.3", "18", "21.8", "18", "21.8", "25.5", "29.3", "25.5", "29.3", "33", "36.8", "40.5", "44.3", "48", "51.8", "55.5", "59.3", "33", "36.8", "40.5", "44.3", "33", "36.8", "33", "36.8", "40.5", "44.3", "40.5", "44.3", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "48", "51.8", "48", "51.8", "55.5", "59.3", "55.5", "59.3", "63", "66.8", "70.5", "74.3", "78", "81.8", "85.5", "89.3", "63", "66.8", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "63", "66.8", "63", "66.8", "70.5", "74.3", "70.5", "74.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "78", "81.8", "78", "81.8", "85.5", "89.3", "85.5", "89.3", "93", "96.8", "100.5", "104.3", "108", "111.8", "115.5", "119.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "93", "96.8", "93", "96.8", "100.5", "104.3", "100.5", "104.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "108", "111.8", "108", "111.8", "115.5", "119.3", "115.5", "119.3", "123", "126.8", "130.5", "134.3", "138", "141.8", "145.5", "149.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "123", "126.8", "123", "126.8", "130.5", "134.3", "130.5", "134.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "138", "141.8", "138", "141.8", "145.5", "149.3", "145.5", "149.3", "153", "156.8", "160.5", "164.3", "168", "171.8", "175.5", "179.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "153", "156.8", "153", "156.8", "160.5", "164.3", "160.5", "164.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "168", "171.8", "168", "171.8", "175.5", "179.3", "175.5", "179.3", "183", "186.8", "190.5", "194.3", "198", "201.8", "205.5", "209.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "183", "186.8", "183", "186.8", "190.5", "194.3", "190.5", "194.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "198", "201.8", "198", "201.8", "205.5", "209.3", "205.5", "209.3", "213", "216.8", "220.5", "224.3", "228", "231.8", "235.5", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "213", "216.8", "213", "216.8", "220.5", "224.3", "220.5", "224.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "228", "231.8", "228", "231.8", "235.5", "239.3", "235.5", "239.3", "243", "246.8", "250.5", "254.3", "258", "261.8", "265.5", "269.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "243", "246.8", "243", "246.8", "250.5", "254.3", "250.5", "254.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "258", "261.8", "258", "261.8", "265.5", "269.3", "265.5", "269.3", "273", "276.8", "280.5", "284.3", "288", "291.8", "295.5", "299.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "273", "276.8", "273", "276.8", "280.5", "284.3", "280.5", "284.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "288", "291.8", "288", "291.8", "295.5", "299.3", "295.5", "299.3", "303", "306.8", "310.5", "314.3", "318", "321.8", "325.5", "329.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "303", "306.8", "303", "306.8", "310.5", "314.3", "310.5", "314.3", "318", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "318", "321.8", "318", "321.8", "325.5", "329.3", "325.5", "329.3", "333", "336.8", "340.5", "344.3", "348", "351.8", "355.5", "359.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "333", "336.8", "333", "336.8", "340.5", "344.3", "340.5", "344.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "348", "351.8", "348", "351.8", "355.5", "359.3", "355.5", "359.3", "363", "366.8", "370.5", "374.3", "378", "381.8", "385.5", "389.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "363", "366.8", "363", "366.8", "370.5", "374.3", "370.5", "374.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "378", "381.8", "378", "381.8", "385.5", "389.3", "385.5", "389.3", "393", "396.8", "400.5", "404.3", "408", "411.8", "415.5", "419.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "393", "396.8", "393", "396.8", "400.5", "404.3", "400.5", "404.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "408", "411.8", "408", "411.8", "415.5", "419.3", "415.5", "419.3", "423", "426.8", "430.5", "434.3", "438", "441.8", "445.5", "449.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "423", "426.8", "423", "426.8", "430.5", "434.3", "430.5", "434.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "438", "441.8", "438", "441.8", "445.5", "449.3", "445.5", "449.3", "453", "456.8", "460.5", "464.3", "468", "471.8", "475.5", "479.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "453", "456.8", "453", "456.8", "460.5", "464.3", "460.5", "464.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "468", "471.8", "468", "471.8", "475.5", "479.3", "475.5", "479.3", "483", "486.8", "490.5", "494.3", "498", "501.8", "505.5", "509.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "483", "486.8", "483", "486.8", "490.5", "494.3", "490.5", "494.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "498", "501.8", "498", "501.8", "505.5", "509.3", "505.5", "509.3", "513", "516.8", "520.5", "524.3", "528", "531.8", "535.5", "539.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "513", "516.8", "513", "516.8", "520.5", "524.3", "520.5", "524.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "528", "531.8", "528", "531.8", "535.5", "539.3", "535.5", "539.3", "543", "546.8", "550.5", "554.3", "558", "561.8", "565.5", "569.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "543", "546.8", "543", "546.8", "550.5", "554.3", "550.5", "554.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "558", "561.8", "558", "561.8", "565.5", "569.3", "565.5", "569.3", "573", "576.8", "580.5", "584.3", "588", "591.8", "595.5", "599.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "573", "576.8", "573", "576.8", "580.5", "584.3", "580.5", "584.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "588", "591.8", "588", "591.8", "595.5", "599.3", "595.5", "599.3", "603", "606.8", "610.5", "614.3", "618", "621.8", "625.5", "629.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "603", "606.8", "603", "606.8", "610.5", "614.3", "610.5", "614.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "618", "621.8", "618", "621.8", "625.5", "629.3", "625.5", "629.3", "633", "636.8", "640.5", "644.3", "648", "651.8", "655.5", "659.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "633", "636.8", "633", "636.8", "640.5", "644.3", "640.5", "644.3", "648", "651.8", "648", "651.8", "655.5", "659.3", "655.5", "659.3", "648", "651.8", "648", "651.8", "655.5", "659.3", "655.5", "659.3", "663", "663", "666.8", "663", "666.8", "670.5", "674.3", "670.5", "674.3", "663", "666.8", "663", "666.8", "670.5", "674.3", "670.5", "674.3", "678", "678", "681.8", "685.5", "678", "681.8", "678", "681.8", "685.5", "685.5", "44.3", "48", "366.8"];
var yCords = ["23.6", "27.4", "23.6", "23.6", "27.4", "27.4", "19.9", "19.9", "19.9", "19.9", "27.4", "27.4", "23.6", "23.6", "27.4", "16.1", "16.1", "19.9", "19.9", "16.1", "16.1", "19.9", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "16.1", "16.1", "19.9", "19.9", "16.1", "16.1", "19.9", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "16.1", "16.1", "19.9", "16.1", "19.9", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "83.6", "68.6", "68.6", "72.4", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "117.4", "117.4", "117.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "98.6", "98.6", "102.4", "102.4", "109.9", "109.9", "113.6", "113.6", "106.1", "106.1", "49.9", "53.6", "57.4", "57.4", "61.1", "64.9", "64.9", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "64.9", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "64.9", "64.9", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "113.6", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "128.6", "132.4", "136.1", "139.9", "143.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "34.9", "34.9", "34.9", "38.6", "38.6", "42.4", "42.4", "42.4", "49.9", "49.9", "46.1", "46.1", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "46.1", "46.1", "46.1", "46.1", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "42.4", "42.4", "42.4", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "38.6", "38.6", "42.4", "42.4", "46.1", "46.1", "46.1", "49.9", "49.9", "53.6", "57.4", "53.6", "53.6", "57.4", "46.1", "46.1", "46.1", "49.9", "49.9", "53.6", "57.4", "53.6", "53.6", "57.4", "64.9", "61.1", "61.1", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "61.1", "64.9", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "72.4", "72.4", "61.1", "64.9", "61.1", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "31.1", "31.1", "34.9", "31.1", "34.9", "34.9", "38.6", "38.6", "38.6", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "38.6", "38.6", "46.1", "46.1", "46.1", "46.1", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "46.1", "46.1", "53.6", "53.6", "57.4", "57.4", "53.6", "57.4", "57.4", "34.9", "31.1", "34.9", "34.9", "38.6", "38.6", "38.6", "42.4", "42.4", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "38.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "61.1", "61.1", "61.1", "61.1", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "61.1", "61.1", "64.9", "64.9", "68.6", "72.4", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "83.6", "79.9", "79.9", "83.6", "87.4", "61.1", "61.1", "64.9", "64.9", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "68.6", "68.6", "72.4", "72.4", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "76.1", "83.6", "87.4", "102.4", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "109.9", "109.9", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "91.1", "91.1", "94.9", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "94.9", "98.6", "98.6", "102.4", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "121.1", "121.1", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "128.6", "132.4", "132.4", "128.6", "132.4", "136.1", "136.1", "139.9", "139.9", "143.6", "136.1", "12.4", "19.9", "19.9", "19.9", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "19.9", "19.9", "16.1", "16.1", "19.9", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "12.4", "12.4", "12.4", "12.4", "12.4", "12.4", "12.4", "12.4", "16.1", "16.1", "19.9", "19.9", "16.1", "16.1", "19.9", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "16.1", "16.1", "19.9", "19.9", "16.1", "16.1", "19.9", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "12.4", "16.1", "16.1", "19.9", "19.9", "16.1", "19.9", "23.6", "23.6", "27.4", "27.4", "23.6", "23.6", "27.4", "27.4", "19.9", "19.9", "19.9", "19.9", "23.6", "23.6", "27.4", "23.6", "27.4", "27.4", "27.4", "27.4", "23.6", "23.6", "23.6", "27.4", "23.6", "23.6", "23.6", "27.4", "23.6", "23.6", "23.6", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "38.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "38.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "46.1", "46.1", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "57.4", "53.6", "53.6", "57.4", "57.4", "46.1", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "38.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "34.9", "38.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "46.1", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "46.1", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "61.1", "61.1", "64.9", "64.9", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "83.6", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "68.6", "68.6", "76.1", "76.1", "79.9", "76.1", "76.1", "83.6", "87.4", "91.1", "91.1", "91.1", "91.1", "94.9", "94.9", "113.6", "113.6", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "124.9", "31.1", "31.1", "34.9", "34.9", "31.1", "31.1", "34.9", "38.6", "38.6", "42.4", "42.4", "38.6", "38.6", "42.4", "42.4", "46.1", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "61.1", "61.1", "64.9", "64.9", "61.1", "68.6", "76.1", "79.9", "76.1", "79.9", "79.9", "83.6", "83.6", "76.1", "79.9", "79.9", "83.6", "98.6", "102.4", "102.4", "91.1", "94.9", "102.4", "109.9", "106.1", "109.9", "113.6", "113.6", "117.4", "113.6", "117.4", "117.4", "109.9", "113.6", "113.6", "117.4", "113.6", "117.4", "117.4", "124.9", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "143.6", "143.6", "147.4", "31.1", "31.1", "34.9", "31.1", "31.1", "34.9", "31.1", "34.9", "38.6", "38.6", "42.4", "38.6", "31.1", "31.1", "34.9", "38.6", "38.6", "64.9", "64.9", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "79.9", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "87.4", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "98.6", "98.6", "102.4", "91.1", "91.1", "94.9", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "106.1", "109.9", "106.1", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "109.9", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "91.1", "91.1", "94.9", "91.1", "91.1", "94.9", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "139.9", "136.1", "136.1", "139.9", "143.6", "147.4", "136.1", "139.9", "136.1", "136.1", "139.9", "143.6", "147.4", "147.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "139.9", "143.6", "147.4", "143.6", "147.4", "147.4", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "53.6", "57.4", "42.4", "42.4", "42.4", "42.4", "42.4", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "53.6", "53.6", "57.4", "46.1", "57.4", "72.4", "68.6", "72.4", "61.1", "68.6", "72.4", "72.4", "68.6", "72.4", "72.4", "76.1", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "61.1", "61.1", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "132.4", "136.1", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "139.9", "136.1", "143.6", "143.6", "147.4", "147.4", "143.6", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "181.1", "184.9", "151.1", "151.1", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "166.1", "173.6", "177.4", "181.1", "181.1", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "181.1", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "196.1", "222.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "158.6", "158.6", "162.4", "166.1", "166.1", "166.1", "169.9", "173.6", "181.1", "184.9", "184.9", "188.6", "192.4", "192.4", "192.4", "181.1", "181.1", "181.1", "184.9", "188.6", "196.1", "196.1", "196.1", "196.1", "199.9", "199.9", "203.6", "199.9", "207.4", "207.4", "203.6", "207.4", "207.4", "184.9", "184.9", "188.6", "188.6", "199.9", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "203.6", "207.4", "207.4", "211.1", "211.1", "214.9", "214.9", "222.4", "218.6", "218.6", "222.4", "222.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "233.6", "237.4", "237.4", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "241.1", "241.1", "244.9", "248.6", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "282.4", "278.6", "278.6", "282.4", "282.4", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "282.4", "286.1", "289.9", "286.1", "286.1", "289.9", "289.9", "293.6", "293.6", "297.4", "297.4", "293.6", "293.6", "297.4", "297.4", "286.1", "286.1", "289.9", "289.9", "286.1", "286.1", "289.9", "289.9", "293.6", "293.6", "297.4", "297.4", "293.6", "293.6", "297.4", "297.4", "312.4", "316.1", "319.9", "323.6", "327.4", "301.1", "301.1", "304.9", "304.9", "301.1", "301.1", "304.9", "304.9", "308.6", "308.6", "312.4", "312.4", "308.6", "308.6", "312.4", "312.4", "301.1", "301.1", "304.9", "308.6", "316.1", "316.1", "319.9", "319.9", "316.1", "316.1", "319.9", "319.9", "323.6", "323.6", "327.4", "327.4", "323.6", "327.4", "316.1", "327.4", "331.1", "331.1", "334.9", "331.1", "331.1", "334.9", "334.9", "334.9", "211.1", "211.1", "214.9", "214.9", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "222.4", "222.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "229.9", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "241.1", "241.1", "244.9", "244.9", "241.1", "248.6", "248.6", "252.4", "252.4", "256.1", "256.1", "259.9", "263.6", "169.9", "169.9", "177.4", "173.6", "173.6", "177.4", "177.4", "151.1", "154.9", "154.9", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "181.1", "181.1", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "196.1", "196.1", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "211.1", "211.1", "211.1", "211.1", "211.1", "151.1", "151.1", "154.9", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "162.4", "162.4", "158.6", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "151.1", "151.1", "162.4", "162.4", "162.4", "162.4", "151.1", "151.1", "151.1", "151.1", "154.9", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "177.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "192.4", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "222.4", "218.6", "218.6", "222.4", "222.4", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "226.1", "226.1", "226.1", "229.9", "229.9", "233.6", "237.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "226.1", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "233.6", "237.4", "237.4", "248.6", "252.4", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "256.1", "259.9", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "241.1", "241.1", "244.9", "244.9", "241.1", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "267.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "177.4", "177.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "177.4", "177.4", "173.6", "173.6", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "173.6", "173.6", "177.4", "181.1", "184.9", "181.1", "181.1", "184.9", "184.9", "192.4", "188.6", "188.6", "192.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "192.4", "188.6", "188.6", "192.4", "196.1", "196.1", "199.9", "199.9", "196.1", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "203.6", "207.4", "207.4", "196.1", "199.9", "203.6", "203.6", "207.4", "207.4", "203.6", "181.1", "181.1", "184.9", "184.9", "181.1", "188.6", "211.1", "211.1", "214.9", "214.9", "211.1", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "211.1", "211.1", "214.9", "226.1", "226.1", "229.9", "233.6", "237.4", "241.1", "244.9", "244.9", "248.6", "248.6", "252.4", "252.4", "244.9", "248.6", "252.4", "252.4", "256.1", "259.9", "263.6", "267.4", "256.1", "256.1", "259.9", "259.9", "263.6", "267.4", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "271.1", "274.9", "278.6", "286.1", "286.1", "289.9", "286.1", "293.6", "327.4", "334.9", "334.9", "271.1", "271.1", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "278.6", "282.4", "282.4", "286.1", "286.1", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "282.4", "271.1", "271.1", "274.9", "274.9", "278.6", "286.1", "53.6", "57.4", "57.4", "57.4", "57.4", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "23.6", "27.4", "23.6", "27.4", "27.4", "27.4", "31.1", "31.1", "31.1", "42.4", "42.4", "38.6", "42.4", "42.4", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "46.1", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "31.1", "31.1", "38.6", "38.6", "42.4", "42.4", "42.4", "42.4", "42.4", "42.4", "46.1", "46.1", "49.9", "49.9", "46.1", "46.1", "49.9", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "46.1", "46.1", "49.9", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "147.4", "143.6", "143.6", "147.4", "147.4", "53.6", "53.6", "57.4", "57.4", "53.6", "53.6", "57.4", "57.4", "53.6", "57.4", "57.4", "42.4", "42.4", "46.1", "46.1", "46.1", "53.6", "57.4", "57.4", "46.1", "46.1", "46.1", "53.6", "57.4", "57.4", "57.4", "57.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "102.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "106.1", "106.1", "109.9", "109.9", "106.1", "106.1", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "98.6", "102.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "94.9", "106.1", "106.1", "109.9", "109.9", "109.9", "113.6", "113.6", "117.4", "117.4", "113.6", "113.6", "117.4", "117.4", "109.9", "113.6", "117.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "121.1", "121.1", "124.9", "124.9", "121.1", "121.1", "124.9", "124.9", "128.6", "128.6", "132.4", "132.4", "128.6", "128.6", "132.4", "132.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "139.9", "139.9", "143.6", "143.6", "147.4", "136.1", "136.1", "139.9", "139.9", "136.1", "136.1", "143.6", "147.4", "147.4", "121.1", "121.1", "124.9", "124.9", "121.1", "124.9", "128.6", "128.6", "132.4", "132.4", "121.1", "124.9", "132.4", "132.4", "136.1", "136.1", "139.9", "143.6", "147.4", "147.4", "136.1", "136.1", "46.1", "61.1", "61.1", "64.9", "64.9", "61.1", "61.1", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "61.1", "64.9", "64.9", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "64.9", "64.9", "64.9", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "64.9", "61.1", "61.1", "68.6", "68.6", "72.4", "72.4", "68.6", "68.6", "72.4", "72.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "83.6", "87.4", "87.4", "76.1", "76.1", "79.9", "79.9", "76.1", "76.1", "79.9", "83.6", "83.6", "87.4", "87.4", "83.6", "87.4", "91.1", "91.1", "94.9", "94.9", "91.1", "91.1", "94.9", "102.4", "91.1", "91.1", "94.9", "91.1", "91.1", "94.9", "94.9", "98.6", "98.6", "102.4", "102.4", "98.6", "102.4", "106.1", "109.9", "113.6", "117.4", "106.1", "106.1", "109.9", "109.9", "91.1", "91.1", "91.1", "91.1", "94.9", "72.4", "72.4", "76.1", "76.1", "79.9", "76.1", "76.1", "79.9", "79.9", "83.6", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "181.1", "181.1", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "188.6", "192.4", "192.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "188.6", "196.1", "196.1", "199.9", "199.9", "203.6", "207.4", "196.1", "199.9", "203.6", "207.4", "211.1", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "154.9", "158.6", "158.6", "162.4", "162.4", "158.6", "158.6", "162.4", "162.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "166.1", "166.1", "169.9", "169.9", "166.1", "166.1", "169.9", "169.9", "173.6", "173.6", "177.4", "177.4", "173.6", "173.6", "177.4", "177.4", "181.1", "181.1", "181.1", "184.9", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "184.9", "188.6", "188.6", "192.4", "188.6", "188.6", "192.4", "192.4", "196.1", "196.1", "199.9", "203.6", "207.4", "207.4", "181.1", "181.1", "184.9", "184.9", "181.1", "181.1", "184.9", "188.6", "188.6", "192.4", "192.4", "192.4", "181.1", "181.1", "184.9", "196.1", "196.1", "199.9", "199.9", "196.1", "196.1", "199.9", "199.9", "203.6", "211.1", "214.9", "211.1", "214.9", "218.6", "218.6", "222.4", "226.1", "211.1", "214.9", "222.4", "218.6", "222.4", "214.9", "211.1", "214.9", "214.9", "218.6", "218.6", "222.4", "222.4", "218.6", "218.6", "222.4", "222.4", "226.1", "226.1", "229.9", "229.9", "233.6", "233.6", "237.4", "226.1", "226.1", "226.1", "237.4", "237.4", "237.4", "237.4", "259.9", "267.4", "263.6", "263.6", "267.4", "267.4", "151.1", "151.1", "154.9", "151.1", "158.6", "158.6", "162.4", "162.4", "151.1", "151.1", "154.9", "154.9", "154.9", "158.6", "158.6", "158.6", "162.4", "166.1", "166.1", "169.9", "169.9", "173.6", "177.4", "151.1", "154.9", "154.9", "151.1", "151.1", "154.9", "188.6", "192.4", "196.1", "199.9", "196.1", "199.9", "199.9", "203.6", "203.6", "207.4", "207.4", "207.4", "211.1", "218.6", "218.6", "218.6", "222.4", "222.4", "222.4", "226.1", "226.1", "229.9", "229.9", "237.4", "226.1", "229.9", "229.9", "226.1", "229.9", "237.4", "226.1", "229.9", "229.9", "226.1", "226.1", "229.9", "229.9", "237.4", "233.6", "233.6", "237.4", "237.4", "229.9", "229.9", "233.6", "233.6", "237.4", "237.4", "233.6", "237.4", "241.1", "241.1", "252.4", "252.4", "244.9", "244.9", "248.6", "252.4", "252.4", "248.6", "248.6", "252.4", "252.4", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "244.9", "244.9", "248.6", "252.4", "252.4", "248.6", "252.4", "244.9", "241.1", "241.1", "248.6", "248.6", "252.4", "252.4", "256.1", "256.1", "259.9", "259.9", "256.1", "256.1", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "256.1", "256.1", "259.9", "259.9", "259.9", "263.6", "263.6", "267.4", "267.4", "263.6", "263.6", "267.4", "267.4", "229.9", "233.6", "233.6", "237.4", "237.4", "241.1", "267.4", "259.9", "248.6", "252.4", "263.6", "256.1", "271.1", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "286.1", "286.1", "289.9", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "282.4", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "282.4", "286.1", "286.1", "289.9", "286.1", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "282.4", "271.1", "271.1", "274.9", "274.9", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "278.6", "278.6", "282.4", "282.4", "286.1", "286.1", "289.9", "286.1", "286.1", "289.9", "289.9", "293.6", "297.4", "286.1", "286.1", "289.9", "289.9", "286.1", "286.1", "289.9", "289.9", "293.6", "293.6", "297.4", "297.4", "293.6", "293.6", "297.4", "304.9", "304.9", "308.6", "271.1", "271.1", "274.9", "274.9", "278.6", "278.6", "282.4", "282.4", "286.1", "289.9", "293.6", "297.4", "297.4", "304.9", "304.9", "308.6", "312.4", "312.4", "308.6", "301.1", "316.1", "158.6", "143.6", "143.6", "323.6", "222.4", "211.1", "68.6", "184.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "387.4", "387.4", "357.4", "357.4", "387.4", "387.4", "387.4", "376.1", "379.9", "387.4", "387.4", "387.4", "368.6", "368.6", "372.4", "361.1", "364.9", "364.9", "361.1", "368.6", "372.4", "372.4", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "387.4", "353.6", "357.4", "387.4", "383.6", "387.4", "387.4", "379.9", "379.9", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "379.9", "379.9", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "379.9", "379.9", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "379.9", "379.9", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "372.4", "372.4", "379.9", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "372.4", "372.4", "372.4", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "364.9", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "372.4", "372.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "387.4", "387.4", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "364.9", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "364.9", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "364.9", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "364.9", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "364.9", "364.9", "364.9", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "368.6", "368.6", "372.4", "372.4", "372.4", "372.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "372.4", "372.4", "372.4", "376.1", "376.1", "379.9", "379.9", "376.1", "376.1", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "376.1", "379.9", "379.9", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "383.6", "383.6", "387.4", "387.4", "379.9", "379.9", "383.6", "383.6", "387.4", "387.4", "409.9", "413.6", "402.4", "402.4", "406.1", "406.1", "409.9", "413.6", "413.6", "421.1", "424.9", "398.6", "398.6", "398.6", "394.9", "398.6", "398.6", "402.4", "406.1", "406.1", "402.4", "406.1", "406.1", "409.9", "409.9", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "413.6", "413.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "394.9", "406.1", "409.9", "413.6", "409.9", "409.9", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "424.9", "424.9", "413.6", "406.1", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "398.6", "398.6", "406.1", "409.9", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "424.9", "424.9", "424.9", "417.4", "417.4", "424.9", "424.9", "424.9", "424.9", "421.1", "421.1", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "398.6", "398.6", "398.6", "398.6", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "394.9", "398.6", "398.6", "391.1", "391.1", "391.1", "391.1", "394.9", "394.9", "398.6", "398.6", "394.9", "402.4", "402.4", "406.1", "406.1", "402.4", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "413.6", "409.9", "409.9", "413.6", "413.6", "402.4", "402.4", "406.1", "406.1", "402.4", "406.1", "406.1", "409.9", "409.9", "413.6", "409.9", "409.9", "402.4", "402.4", "406.1", "406.1", "409.9", "417.4", "417.4", "421.1", "421.1", "417.4", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "424.9", "417.4", "421.1", "421.1", "424.9", "424.9", "424.9", "428.6", "428.6", "436.1", "439.9", "443.6", "436.1", "436.1", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "436.1", "436.1", "432.4", "432.4", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "428.6", "432.4", "432.4", "436.1", "436.1", "432.4", "432.4", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "439.9", "443.6", "443.6", "432.4", "436.1", "436.1", "436.1", "439.9", "439.9", "443.6", "443.6", "439.9", "443.6", "421.1", "421.1", "218.6"];
window.addEventListener("DOMContentLoaded", function () {
  function worldMap(id, color) {
    if (document.querySelectorAll("section.location").length) {
      if (window.matchMedia("(max-width: 1800px)").matches) {
        var _svg = document.querySelector("svg");

        _svg.setAttribute("viewBox", "0 0 1000 320");
      }

      if (window.matchMedia("(max-width: 1440px)").matches) {
        var svg = document.querySelector("svg");
        svg.setAttribute("viewBox", "0 0 800 300");
      }

      if (window.matchMedia("(max-width: 768px)").matches) {
        var svg = document.querySelector("svg");
        svg.setAttribute("viewBox", "150 50 450 300");
      }

      if (window.matchMedia("(max-width: 480px)").matches) {
        var svg = document.querySelector("svg");
        svg.setAttribute("viewBox", "300 0 200 320");
      }

      if (window.matchMedia("(min-width: 1801px)").matches) {
        var _svg = document.querySelector("svg");

        _svg.setAttribute("viewBox", "-210 0 1400 320");
      }

      for (var i = 0; i < xCords.length; i++) {
        var newCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        newCircle.setAttribute("cx", xCords[i]);
        newCircle.setAttribute("cy", yCords[i]);
        newCircle.setAttribute("r", "1");

        if (i === 5352 || i === 5150 || i === 5032 || i === 5113 || i === 5042 || i === 4999 || i === 4572 || i === 3485 || i === 3451 || i === 3446 || i === 2880 || i === 2856 || i === 3104 || i === 8190 || i === 1734 || i === 1466 || i === 1787 || i === 1773 || i === 1436 || i === 1445 || i === 1429 || i === 1614 || i === 1700 || i === 1595 || i === 2016 || i === 2333 || i === 2589 || i === 1049 || i === 2213 || i === 2279) {
          var areaTitle;
          newCircle.setAttribute("fill", "#c3d833");

          switch (i) {
            case 994:
              areaTitle = "Markham, Ontario";
              break;

            case 1443:
              areaTitle = "London, Storbritannien";
              break;

            case 1604:
              areaTitle = "Göteborg, Sverige";
              break;

            case 5018:
              areaTitle = "Hongkong";
              break;
          }

          newCircle.setAttribute("title", "" + areaTitle + "");
          $(id).append(newCircle);
        } else {
          newCircle.setAttribute("fill", color);
          $(id).prepend(newCircle);
        }
      }
    }
  }

  worldMap("#worldmap", "#5c5c5c");
});
// ie
function changeSlider(evt) {
  var blockThatNeedToOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "blog-slider";
  var button = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "active-button";
  var displayStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "block";
  var i;
  $(".".concat(blockThatNeedToOpen)).slick("unslick");
  type = event.target.getAttribute("data-categories") + "-top-slider";
  type = type.toLocaleLowerCase();
  var x = document.querySelectorAll(".".concat(blockThatNeedToOpen));

  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }

  document.querySelector(".".concat(type)).style.display = displayStyle;
  $(".".concat(type)).slick({
    slidesToShow: 1,
    autoplay: true,
    autoplaySpeed: 6000,
    dots: false,
    fade: true,
    prevArrow: '<div class="slick-prev"></div>',
    nextArrow: '<div class="slick-next"></div>',
    responsive: [{
      breakpoint: 481,
      settings: {
        arrows: false
      }
    }]
  });
} // close popup


document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll(".newsandblog").length > 0) {
    var popUp = document.querySelector(".popup");
    var closePopUp = document.querySelector(".popup__close");
    closePopUp.addEventListener("click", function () {
      popUp.style.display = "none";
    });
  }

  ;
});
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".aboutUs, .services, .careers-page, .sectors-oil, .sectors-grid, .sectors-generation, .sectors-construction, .services-collection")) {
    var init = function init() {
      _video = document.getElementById("video");

      _video.addEventListener("pause", function () {
        return _playBtn.style.display = 'block';
      });

      _video.addEventListener("play", function () {
        return _playBtn.style.display = 'none';
      });

      _playBtn = document.getElementById("playBtn");
      _pauseBtn = document.getElementById("pauseBtn");
    };

    document.addEventListener("DOMContentLoaded", init(), false);
  }
});
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! @license ScrollReveal v4.0.5

	Copyright 2018 Fisssion LLC.

	Licensed under the GNU General Public License 3.0 for
	compatible open source projects and non-commercial use.

	For commercial sites, themes, projects, and applications,
	keep your source code private/proprietary by purchasing
	a commercial license from https://scrollrevealjs.org/
*/
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.ScrollReveal = factory();
})(this, function () {
  "use strict";

  var defaults = {
    delay: 0,
    distance: "0",
    duration: 600,
    easing: "cubic-bezier(0.5, 0, 0, 1)",
    interval: 0,
    opacity: 0,
    origin: "bottom",
    rotate: {
      x: 0,
      y: 0,
      z: 0
    },
    scale: 1,
    cleanup: false,
    container: document.documentElement,
    desktop: true,
    mobile: true,
    reset: false,
    useDelay: "always",
    viewFactor: 0.0,
    viewOffset: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    afterReset: function afterReset() {},
    afterReveal: function afterReveal() {},
    beforeReset: function beforeReset() {},
    beforeReveal: function beforeReveal() {}
  };

  function failure() {
    document.documentElement.classList.remove("sr");
    return {
      clean: function clean() {},
      destroy: function destroy() {},
      reveal: function reveal() {},
      sync: function sync() {},

      get noop() {
        return true;
      }

    };
  }

  function success() {
    document.documentElement.classList.add("sr");

    if (document.body) {
      document.body.style.height = "100%";
    } else {
      document.addEventListener("DOMContentLoaded", function () {
        document.body.style.height = "100%";
      });
    }
  }

  var mount = {
    success: success,
    failure: failure
  };
  /*! @license is-dom-node v1.0.4
  
    Copyright 2018 Fisssion LLC.
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  
  */

  function isDomNode(x) {
    return _typeof(window.Node) === "object" ? x instanceof window.Node : x !== null && _typeof(x) === "object" && typeof x.nodeType === "number" && typeof x.nodeName === "string";
  }
  /*! @license is-dom-node-list v1.2.1
  
    Copyright 2018 Fisssion LLC.
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  
  */


  function isDomNodeList(x) {
    var prototypeToString = Object.prototype.toString.call(x);
    var regex = /^\[object (HTMLCollection|NodeList|Object)\]$/;
    return _typeof(window.NodeList) === "object" ? x instanceof window.NodeList : x !== null && _typeof(x) === "object" && typeof x.length === "number" && regex.test(prototypeToString) && (x.length === 0 || isDomNode(x[0]));
  }
  /*! @license Tealight v0.3.6
  
    Copyright 2018 Fisssion LLC.
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  
  */


  function tealight(target, context) {
    if (context === void 0) {
      context = document;
    }

    if (target instanceof Array) {
      return target.filter(isDomNode);
    }

    if (isDomNode(target)) {
      return [target];
    }

    if (isDomNodeList(target)) {
      return Array.prototype.slice.call(target);
    }

    if (typeof target === "string") {
      try {
        var query = context.querySelectorAll(target);
        return Array.prototype.slice.call(query);
      } catch (err) {
        return [];
      }
    }

    return [];
  }

  function isObject(x) {
    return x !== null && x instanceof Object && (x.constructor === Object || Object.prototype.toString.call(x) === "[object Object]");
  }

  function each(collection, callback) {
    if (isObject(collection)) {
      var keys = Object.keys(collection);
      return keys.forEach(function (key) {
        return callback(collection[key], key, collection);
      });
    }

    if (collection instanceof Array) {
      return collection.forEach(function (item, i) {
        return callback(item, i, collection);
      });
    }

    throw new TypeError("Expected either an array or object literal.");
  }

  function logger(message) {
    var details = [],
        len = arguments.length - 1;

    while (len-- > 0) {
      details[len] = arguments[len + 1];
    }

    if (this.constructor.debug && console) {
      var report = "%cScrollReveal: " + message;
      details.forEach(function (detail) {
        return report += "\n — " + detail;
      });
      console.log(report, "color: #ea654b;"); // eslint-disable-line no-console
    }
  }

  function rinse() {
    var this$1 = this;

    var struct = function struct() {
      return {
        active: [],
        stale: []
      };
    };

    var elementIds = struct();
    var sequenceIds = struct();
    var containerIds = struct();
    /**
     * Take stock of active element IDs.
     */

    try {
      each(tealight("[data-sr-id]"), function (node) {
        var id = parseInt(node.getAttribute("data-sr-id"));
        elementIds.active.push(id);
      });
    } catch (e) {
      throw e;
    }
    /**
     * Destroy stale elements.
     */


    each(this.store.elements, function (element) {
      if (elementIds.active.indexOf(element.id) === -1) {
        elementIds.stale.push(element.id);
      }
    });
    each(elementIds.stale, function (staleId) {
      return delete this$1.store.elements[staleId];
    });
    /**
     * Take stock of active container and sequence IDs.
     */

    each(this.store.elements, function (element) {
      if (containerIds.active.indexOf(element.containerId) === -1) {
        containerIds.active.push(element.containerId);
      }

      if (element.hasOwnProperty("sequence")) {
        if (sequenceIds.active.indexOf(element.sequence.id) === -1) {
          sequenceIds.active.push(element.sequence.id);
        }
      }
    });
    /**
     * Destroy stale containers.
     */

    each(this.store.containers, function (container) {
      if (containerIds.active.indexOf(container.id) === -1) {
        containerIds.stale.push(container.id);
      }
    });
    each(containerIds.stale, function (staleId) {
      var stale = this$1.store.containers[staleId].node;
      stale.removeEventListener("scroll", this$1.delegate);
      stale.removeEventListener("resize", this$1.delegate);
      delete this$1.store.containers[staleId];
    });
    /**
     * Destroy stale sequences.
     */

    each(this.store.sequences, function (sequence) {
      if (sequenceIds.active.indexOf(sequence.id) === -1) {
        sequenceIds.stale.push(sequence.id);
      }
    });
    each(sequenceIds.stale, function (staleId) {
      return delete this$1.store.sequences[staleId];
    });
  }

  function clean(target) {
    var this$1 = this;
    var dirty;

    try {
      each(tealight(target), function (node) {
        var id = node.getAttribute("data-sr-id");

        if (id !== null) {
          dirty = true;
          var element = this$1.store.elements[id];

          if (element.callbackTimer) {
            window.clearTimeout(element.callbackTimer.clock);
          }

          node.setAttribute("style", element.styles.inline.generated);
          node.removeAttribute("data-sr-id");
          delete this$1.store.elements[id];
        }
      });
    } catch (e) {
      return logger.call(this, "Clean failed.", e.message);
    }

    if (dirty) {
      try {
        rinse.call(this);
      } catch (e) {
        return logger.call(this, "Clean failed.", e.message);
      }
    }
  }

  function destroy() {
    var this$1 = this;
    /**
     * Remove all generated styles and element ids
     */

    each(this.store.elements, function (element) {
      element.node.setAttribute("style", element.styles.inline.generated);
      element.node.removeAttribute("data-sr-id");
    });
    /**
     * Remove all event listeners.
     */

    each(this.store.containers, function (container) {
      var target = container.node === document.documentElement ? window : container.node;
      target.removeEventListener("scroll", this$1.delegate);
      target.removeEventListener("resize", this$1.delegate);
    });
    /**
     * Clear all data from the store
     */

    this.store = {
      containers: {},
      elements: {},
      history: [],
      sequences: {}
    };
  }
  /*! @license Rematrix v0.3.0
  
    Copyright 2018 Julian Lloyd.
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
  */

  /**
   * @module Rematrix
   */

  /**
   * Transformation matrices in the browser come in two flavors:
   *
   *  - `matrix` using 6 values (short)
   *  - `matrix3d` using 16 values (long)
   *
   * This utility follows this [conversion guide](https://goo.gl/EJlUQ1)
   * to expand short form matrices to their equivalent long form.
   *
   * @param  {array} source - Accepts both short and long form matrices.
   * @return {array}
   */


  function format(source) {
    if (source.constructor !== Array) {
      throw new TypeError("Expected array.");
    }

    if (source.length === 16) {
      return source;
    }

    if (source.length === 6) {
      var matrix = identity();
      matrix[0] = source[0];
      matrix[1] = source[1];
      matrix[4] = source[2];
      matrix[5] = source[3];
      matrix[12] = source[4];
      matrix[13] = source[5];
      return matrix;
    }

    throw new RangeError("Expected array with either 6 or 16 values.");
  }
  /**
   * Returns a matrix representing no transformation. The product of any matrix
   * multiplied by the identity matrix will be the original matrix.
   *
   * > **Tip:** Similar to how `5 * 1 === 5`, where `1` is the identity.
   *
   * @return {array}
   */


  function identity() {
    var matrix = [];

    for (var i = 0; i < 16; i++) {
      i % 5 == 0 ? matrix.push(1) : matrix.push(0);
    }

    return matrix;
  }
  /**
   * Returns a 4x4 matrix describing the combined transformations
   * of both arguments.
   *
   * > **Note:** Order is very important. For example, rotating 45°
   * along the Z-axis, followed by translating 500 pixels along the
   * Y-axis... is not the same as translating 500 pixels along the
   * Y-axis, followed by rotating 45° along on the Z-axis.
   *
   * @param  {array} m - Accepts both short and long form matrices.
   * @param  {array} x - Accepts both short and long form matrices.
   * @return {array}
   */


  function multiply(m, x) {
    var fm = format(m);
    var fx = format(x);
    var product = [];

    for (var i = 0; i < 4; i++) {
      var row = [fm[i], fm[i + 4], fm[i + 8], fm[i + 12]];

      for (var j = 0; j < 4; j++) {
        var k = j * 4;
        var col = [fx[k], fx[k + 1], fx[k + 2], fx[k + 3]];
        var result = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];
        product[i + k] = result;
      }
    }

    return product;
  }
  /**
   * Attempts to return a 4x4 matrix describing the CSS transform
   * matrix passed in, but will return the identity matrix as a
   * fallback.
   *
   * > **Tip:** This method is used to convert a CSS matrix (retrieved as a
   * `string` from computed styles) to its equivalent array format.
   *
   * @param  {string} source - `matrix` or `matrix3d` CSS Transform value.
   * @return {array}
   */


  function parse(source) {
    if (typeof source === "string") {
      var match = source.match(/matrix(3d)?\(([^)]+)\)/);

      if (match) {
        var raw = match[2].split(", ").map(parseFloat);
        return format(raw);
      }
    }

    return identity();
  }
  /**
   * Returns a 4x4 matrix describing X-axis rotation.
   *
   * @param  {number} angle - Measured in degrees.
   * @return {array}
   */


  function rotateX(angle) {
    var theta = Math.PI / 180 * angle;
    var matrix = identity();
    matrix[5] = matrix[10] = Math.cos(theta);
    matrix[6] = matrix[9] = Math.sin(theta);
    matrix[9] *= -1;
    return matrix;
  }
  /**
   * Returns a 4x4 matrix describing Y-axis rotation.
   *
   * @param  {number} angle - Measured in degrees.
   * @return {array}
   */


  function rotateY(angle) {
    var theta = Math.PI / 180 * angle;
    var matrix = identity();
    matrix[0] = matrix[10] = Math.cos(theta);
    matrix[2] = matrix[8] = Math.sin(theta);
    matrix[2] *= -1;
    return matrix;
  }
  /**
   * Returns a 4x4 matrix describing Z-axis rotation.
   *
   * @param  {number} angle - Measured in degrees.
   * @return {array}
   */


  function rotateZ(angle) {
    var theta = Math.PI / 180 * angle;
    var matrix = identity();
    matrix[0] = matrix[5] = Math.cos(theta);
    matrix[1] = matrix[4] = Math.sin(theta);
    matrix[4] *= -1;
    return matrix;
  }
  /**
   * Returns a 4x4 matrix describing 2D scaling. The first argument
   * is used for both X and Y-axis scaling, unless an optional
   * second argument is provided to explicitly define Y-axis scaling.
   *
   * @param  {number} scalar    - Decimal multiplier.
   * @param  {number} [scalarY] - Decimal multiplier.
   * @return {array}
   */


  function scale(scalar, scalarY) {
    var matrix = identity();
    matrix[0] = scalar;
    matrix[5] = typeof scalarY === "number" ? scalarY : scalar;
    return matrix;
  }
  /**
   * Returns a 4x4 matrix describing X-axis translation.
   *
   * @param  {number} distance - Measured in pixels.
   * @return {array}
   */


  function translateX(distance) {
    var matrix = identity();
    matrix[12] = distance;
    return matrix;
  }
  /**
   * Returns a 4x4 matrix describing Y-axis translation.
   *
   * @param  {number} distance - Measured in pixels.
   * @return {array}
   */


  function translateY(distance) {
    var matrix = identity();
    matrix[13] = distance;
    return matrix;
  }

  var getPrefixedCssProp = function () {
    var properties = {};
    var style = document.documentElement.style;

    function getPrefixedCssProperty(name, source) {
      if (source === void 0) source = style;

      if (name && typeof name === "string") {
        if (properties[name]) {
          return properties[name];
        }

        if (typeof source[name] === "string") {
          return properties[name] = name;
        }

        if (typeof source["-webkit-" + name] === "string") {
          return properties[name] = "-webkit-" + name;
        }

        throw new RangeError('Unable to find "' + name + '" style property.');
      }

      throw new TypeError("Expected a string.");
    }

    getPrefixedCssProperty.clearCache = function () {
      return properties = {};
    };

    return getPrefixedCssProperty;
  }();

  function style(element) {
    var computed = window.getComputedStyle(element.node);
    var position = computed.position;
    var config = element.config;
    /**
     * Generate inline styles
     */

    var inline = {};
    var inlineStyle = element.node.getAttribute("style") || "";
    var inlineMatch = inlineStyle.match(/[\w-]+\s*:\s*[^;]+\s*/gi) || [];
    inline.computed = inlineMatch ? inlineMatch.map(function (m) {
      return m.trim();
    }).join("; ") + ";" : "";
    inline.generated = inlineMatch.some(function (m) {
      return m.match(/visibility\s?:\s?visible/i);
    }) ? inline.computed : inlineMatch.concat(["visibility: visible"]).map(function (m) {
      return m.trim();
    }).join("; ") + ";";
    /**
     * Generate opacity styles
     */

    var computedOpacity = parseFloat(computed.opacity);
    var configOpacity = !isNaN(parseFloat(config.opacity)) ? parseFloat(config.opacity) : parseFloat(computed.opacity);
    var opacity = {
      computed: computedOpacity !== configOpacity ? "opacity: " + computedOpacity + ";" : "",
      generated: computedOpacity !== configOpacity ? "opacity: " + configOpacity + ";" : ""
    };
    /**
     * Generate transformation styles
     */

    var transformations = [];

    if (parseFloat(config.distance)) {
      var axis = config.origin === "top" || config.origin === "bottom" ? "Y" : "X";
      /**
       * Let’s make sure our our pixel distances are negative for top and left.
       * e.g. { origin: 'top', distance: '25px' } starts at `top: -25px` in CSS.
       */

      var distance = config.distance;

      if (config.origin === "top" || config.origin === "left") {
        distance = /^-/.test(distance) ? distance.substr(1) : "-" + distance;
      }

      var ref = distance.match(/(^-?\d+\.?\d?)|(em$|px$|%$)/g);
      var value = ref[0];
      var unit = ref[1];

      switch (unit) {
        case "em":
          distance = parseInt(computed.fontSize) * value;
          break;

        case "px":
          distance = value;
          break;

        case "%":
          /**
           * Here we use `getBoundingClientRect` instead of
           * the existing data attached to `element.geometry`
           * because only the former includes any transformations
           * current applied to the element.
           *
           * If that behavior ends up being unintuitive, this
           * logic could instead utilize `element.geometry.height`
           * and `element.geoemetry.width` for the distaince calculation
           */
          distance = axis === "Y" ? element.node.getBoundingClientRect().height * value / 100 : element.node.getBoundingClientRect().width * value / 100;
          break;

        default:
          throw new RangeError("Unrecognized or missing distance unit.");
      }

      if (axis === "Y") {
        transformations.push(translateY(distance));
      } else {
        transformations.push(translateX(distance));
      }
    }

    if (config.rotate.x) {
      transformations.push(rotateX(config.rotate.x));
    }

    if (config.rotate.y) {
      transformations.push(rotateY(config.rotate.y));
    }

    if (config.rotate.z) {
      transformations.push(rotateZ(config.rotate.z));
    }

    if (config.scale !== 1) {
      if (config.scale === 0) {
        /**
         * The CSS Transforms matrix interpolation specification
         * basically disallows transitions of non-invertible
         * matrixes, which means browsers won't transition
         * elements with zero scale.
         *
         * That’s inconvenient for the API and developer
         * experience, so we simply nudge their value
         * slightly above zero; this allows browsers
         * to transition our element as expected.
         *
         * `0.0002` was the smallest number
         * that performed across browsers.
         */
        transformations.push(scale(0.0002));
      } else {
        transformations.push(scale(config.scale));
      }
    }

    var transform = {};

    if (transformations.length) {
      transform.property = getPrefixedCssProp("transform");
      /**
       * The default computed transform value should be one of:
       * undefined || 'none' || 'matrix()' || 'matrix3d()'
       */

      transform.computed = {
        raw: computed[transform.property],
        matrix: parse(computed[transform.property])
      };
      transformations.unshift(transform.computed.matrix);
      var product = transformations.reduce(multiply);
      transform.generated = {
        initial: transform.property + ": matrix3d(" + product.join(", ") + ");",
        "final": transform.property + ": matrix3d(" + transform.computed.matrix.join(", ") + ");"
      };
    } else {
      transform.generated = {
        initial: "",
        "final": ""
      };
    }
    /**
     * Generate transition styles
     */


    var transition = {};

    if (opacity.generated || transform.generated.initial) {
      transition.property = getPrefixedCssProp("transition");
      transition.computed = computed[transition.property];
      transition.fragments = [];
      var delay = config.delay;
      var duration = config.duration;
      var easing = config.easing;

      if (opacity.generated) {
        transition.fragments.push({
          delayed: "opacity " + duration / 1000 + "s " + easing + " " + delay / 1000 + "s",
          instant: "opacity " + duration / 1000 + "s " + easing + " 0s"
        });
      }

      if (transform.generated.initial) {
        transition.fragments.push({
          delayed: transform.property + " " + duration / 1000 + "s " + easing + " " + delay / 1000 + "s",
          instant: transform.property + " " + duration / 1000 + "s " + easing + " 0s"
        });
      }
      /**
       * The default computed transition property should be one of:
       * undefined || '' || 'all 0s ease 0s' || 'all 0s 0s cubic-bezier()'
       */


      if (transition.computed && !transition.computed.match(/all 0s/)) {
        transition.fragments.unshift({
          delayed: transition.computed,
          instant: transition.computed
        });
      }

      var composed = transition.fragments.reduce(function (composition, fragment, i) {
        composition.delayed += i === 0 ? fragment.delayed : ", " + fragment.delayed;
        composition.instant += i === 0 ? fragment.instant : ", " + fragment.instant;
        return composition;
      }, {
        delayed: "",
        instant: ""
      });
      transition.generated = {
        delayed: transition.property + ": " + composed.delayed + ";",
        instant: transition.property + ": " + composed.instant + ";"
      };
    } else {
      transition.generated = {
        delayed: "",
        instant: ""
      };
    }

    return {
      inline: inline,
      opacity: opacity,
      position: position,
      transform: transform,
      transition: transition
    };
  }

  function animate(element, force) {
    if (force === void 0) force = {};
    var pristine = force.pristine || this.pristine;
    var delayed = element.config.useDelay === "always" || element.config.useDelay === "onload" && pristine || element.config.useDelay === "once" && !element.seen;
    var shouldReveal = element.visible && !element.revealed;
    var shouldReset = !element.visible && element.revealed && element.config.reset;

    if (force.reveal || shouldReveal) {
      return triggerReveal.call(this, element, delayed);
    }

    if (force.reset || shouldReset) {
      return triggerReset.call(this, element);
    }
  }

  function triggerReveal(element, delayed) {
    var styles = [element.styles.inline.generated, element.styles.opacity.computed, element.styles.transform.generated["final"]];

    if (delayed) {
      styles.push(element.styles.transition.generated.delayed);
    } else {
      styles.push(element.styles.transition.generated.instant);
    }

    element.revealed = element.seen = true;
    element.node.setAttribute("style", styles.filter(function (s) {
      return s !== "";
    }).join(" "));
    registerCallbacks.call(this, element, delayed);
  }

  function triggerReset(element) {
    var styles = [element.styles.inline.generated, element.styles.opacity.generated, element.styles.transform.generated.initial, element.styles.transition.generated.instant];
    element.revealed = false;
    element.node.setAttribute("style", styles.filter(function (s) {
      return s !== "";
    }).join(" "));
    registerCallbacks.call(this, element);
  }

  function registerCallbacks(element, isDelayed) {
    var this$1 = this;
    var duration = isDelayed ? element.config.duration + element.config.delay : element.config.duration;
    var beforeCallback = element.revealed ? element.config.beforeReveal : element.config.beforeReset;
    var afterCallback = element.revealed ? element.config.afterReveal : element.config.afterReset;
    var elapsed = 0;

    if (element.callbackTimer) {
      elapsed = Date.now() - element.callbackTimer.start;
      window.clearTimeout(element.callbackTimer.clock);
    }

    beforeCallback(element.node);
    element.callbackTimer = {
      start: Date.now(),
      clock: window.setTimeout(function () {
        afterCallback(element.node);
        element.callbackTimer = null;

        if (element.revealed && !element.config.reset && element.config.cleanup) {
          clean.call(this$1, element.node);
        }
      }, duration - elapsed)
    };
  }

  var nextUniqueId = function () {
    var uid = 0;
    return function () {
      return uid++;
    };
  }();

  function sequence(element, pristine) {
    if (pristine === void 0) pristine = this.pristine;
    /**
     * We first check if the element should reset.
     */

    if (!element.visible && element.revealed && element.config.reset) {
      return animate.call(this, element, {
        reset: true
      });
    }

    var seq = this.store.sequences[element.sequence.id];
    var i = element.sequence.index;

    if (seq) {
      var visible = new SequenceModel(seq, "visible", this.store);
      var revealed = new SequenceModel(seq, "revealed", this.store);
      seq.models = {
        visible: visible,
        revealed: revealed
      };
      /**
       * If the sequence has no revealed members,
       * then we reveal the first visible element
       * within that sequence.
       *
       * The sequence then cues a recursive call
       * in both directions.
       */

      if (!revealed.body.length) {
        var nextId = seq.members[visible.body[0]];
        var nextElement = this.store.elements[nextId];

        if (nextElement) {
          cue.call(this, seq, visible.body[0], -1, pristine);
          cue.call(this, seq, visible.body[0], +1, pristine);
          return animate.call(this, nextElement, {
            reveal: true,
            pristine: pristine
          });
        }
      }
      /**
       * If our element isn’t resetting, we check the
       * element sequence index against the head, and
       * then the foot of the sequence.
       */


      if (!seq.blocked.head && i === [].concat(revealed.head).pop() && i >= [].concat(visible.body).shift()) {
        cue.call(this, seq, i, -1, pristine);
        return animate.call(this, element, {
          reveal: true,
          pristine: pristine
        });
      }

      if (!seq.blocked.foot && i === [].concat(revealed.foot).shift() && i <= [].concat(visible.body).pop()) {
        cue.call(this, seq, i, +1, pristine);
        return animate.call(this, element, {
          reveal: true,
          pristine: pristine
        });
      }
    }
  }

  function Sequence(interval) {
    var i = Math.abs(interval);

    if (!isNaN(i)) {
      this.id = nextUniqueId();
      this.interval = Math.max(i, 16);
      this.members = [];
      this.models = {};
      this.blocked = {
        head: false,
        foot: false
      };
    } else {
      throw new RangeError("Invalid sequence interval.");
    }
  }

  function SequenceModel(seq, prop, store) {
    var this$1 = this;
    this.head = [];
    this.body = [];
    this.foot = [];
    each(seq.members, function (id, index) {
      var element = store.elements[id];

      if (element && element[prop]) {
        this$1.body.push(index);
      }
    });

    if (this.body.length) {
      each(seq.members, function (id, index) {
        var element = store.elements[id];

        if (element && !element[prop]) {
          if (index < this$1.body[0]) {
            this$1.head.push(index);
          } else {
            this$1.foot.push(index);
          }
        }
      });
    }
  }

  function cue(seq, i, direction, pristine) {
    var this$1 = this;
    var blocked = ["head", null, "foot"][1 + direction];
    var nextId = seq.members[i + direction];
    var nextElement = this.store.elements[nextId];
    seq.blocked[blocked] = true;
    setTimeout(function () {
      seq.blocked[blocked] = false;

      if (nextElement) {
        sequence.call(this$1, nextElement, pristine);
      }
    }, seq.interval);
  }

  function initialize() {
    var this$1 = this;
    rinse.call(this);
    each(this.store.elements, function (element) {
      var styles = [element.styles.inline.generated];

      if (element.visible) {
        styles.push(element.styles.opacity.computed);
        styles.push(element.styles.transform.generated["final"]);
        element.revealed = true;
      } else {
        styles.push(element.styles.opacity.generated);
        styles.push(element.styles.transform.generated.initial);
        element.revealed = false;
      }

      element.node.setAttribute("style", styles.filter(function (s) {
        return s !== "";
      }).join(" "));
    });
    each(this.store.containers, function (container) {
      var target = container.node === document.documentElement ? window : container.node;
      target.addEventListener("scroll", this$1.delegate);
      target.addEventListener("resize", this$1.delegate);
    });
    /**
     * Manually invoke delegate once to capture
     * element and container dimensions, container
     * scroll position, and trigger any valid reveals
     */

    this.delegate();
    /**
     * Wipe any existing `setTimeout` now
     * that initialization has completed.
     */

    this.initTimeout = null;
  }

  function isMobile(agent) {
    if (agent === void 0) agent = navigator.userAgent;
    return /Android|iPhone|iPad|iPod/i.test(agent);
  }

  function deepAssign(target) {
    var sources = [],
        len = arguments.length - 1;

    while (len-- > 0) {
      sources[len] = arguments[len + 1];
    }

    if (isObject(target)) {
      each(sources, function (source) {
        each(source, function (data, key) {
          if (isObject(data)) {
            if (!target[key] || !isObject(target[key])) {
              target[key] = {};
            }

            deepAssign(target[key], data);
          } else {
            target[key] = data;
          }
        });
      });
      return target;
    } else {
      throw new TypeError("Target must be an object literal.");
    }
  }

  function reveal(target, options, syncing) {
    var this$1 = this;
    if (options === void 0) options = {};
    if (syncing === void 0) syncing = false;
    var containerBuffer = [];
    var sequence$$1;
    var interval = options.interval || defaults.interval;

    try {
      if (interval) {
        sequence$$1 = new Sequence(interval);
      }

      var nodes = tealight(target);

      if (!nodes.length) {
        throw new Error("Invalid reveal target.");
      }

      var elements = nodes.reduce(function (elementBuffer, elementNode) {
        var element = {};
        var existingId = elementNode.getAttribute("data-sr-id");

        if (existingId) {
          deepAssign(element, this$1.store.elements[existingId]);
          /**
           * In order to prevent previously generated styles
           * from throwing off the new styles, the style tag
           * has to be reverted to its pre-reveal state.
           */

          element.node.setAttribute("style", element.styles.inline.computed);
        } else {
          element.id = nextUniqueId();
          element.node = elementNode;
          element.seen = false;
          element.revealed = false;
          element.visible = false;
        }

        var config = deepAssign({}, element.config || this$1.defaults, options);

        if (!config.mobile && isMobile() || !config.desktop && !isMobile()) {
          if (existingId) {
            clean.call(this$1, element);
          }

          return elementBuffer; // skip elements that are disabled
        }

        var containerNode = tealight(config.container)[0];

        if (!containerNode) {
          throw new Error("Invalid container.");
        }

        if (!containerNode.contains(elementNode)) {
          return elementBuffer; // skip elements found outside the container
        }

        var containerId;
        {
          containerId = getContainerId(containerNode, containerBuffer, this$1.store.containers);

          if (containerId === null) {
            containerId = nextUniqueId();
            containerBuffer.push({
              id: containerId,
              node: containerNode
            });
          }
        }
        element.config = config;
        element.containerId = containerId;
        element.styles = style(element);

        if (sequence$$1) {
          element.sequence = {
            id: sequence$$1.id,
            index: sequence$$1.members.length
          };
          sequence$$1.members.push(element.id);
        }

        elementBuffer.push(element);
        return elementBuffer;
      }, []);
      /**
       * Modifying the DOM via setAttribute needs to be handled
       * separately from reading computed styles in the map above
       * for the browser to batch DOM changes (limiting reflows)
       */

      each(elements, function (element) {
        this$1.store.elements[element.id] = element;
        element.node.setAttribute("data-sr-id", element.id);
      });
    } catch (e) {
      return logger.call(this, "Reveal failed.", e.message);
    }
    /**
     * Now that element set-up is complete...
     * Let’s commit any container and sequence data we have to the store.
     */


    each(containerBuffer, function (container) {
      this$1.store.containers[container.id] = {
        id: container.id,
        node: container.node
      };
    });

    if (sequence$$1) {
      this.store.sequences[sequence$$1.id] = sequence$$1;
    }
    /**
     * If reveal wasn't invoked by sync, we want to
     * make sure to add this call to the history.
     */


    if (syncing !== true) {
      this.store.history.push({
        target: target,
        options: options
      });
      /**
       * Push initialization to the event queue, giving
       * multiple reveal calls time to be interpreted.
       */

      if (this.initTimeout) {
        window.clearTimeout(this.initTimeout);
      }

      this.initTimeout = window.setTimeout(initialize.bind(this), 0);
    }
  }

  function getContainerId(node) {
    var collections = [],
        len = arguments.length - 1;

    while (len-- > 0) {
      collections[len] = arguments[len + 1];
    }

    var id = null;
    each(collections, function (collection) {
      each(collection, function (container) {
        if (id === null && container.node === node) {
          id = container.id;
        }
      });
    });
    return id;
  }
  /**
   * Re-runs the reveal method for each record stored in history,
   * for capturing new content asynchronously loaded into the DOM.
   */


  function sync() {
    var this$1 = this;
    each(this.store.history, function (record) {
      reveal.call(this$1, record.target, record.options, true);
    });
    initialize.call(this);
  }

  var polyfill = function polyfill(x) {
    return (x > 0) - (x < 0) || +x;
  };

  var mathSign = Math.sign || polyfill;
  /*! @license miniraf v1.0.0
  
    Copyright 2018 Fisssion LLC.
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  
  */

  var polyfill$1 = function () {
    var clock = Date.now();
    return function (callback) {
      var currentTime = Date.now();

      if (currentTime - clock > 16) {
        clock = currentTime;
        callback(currentTime);
      } else {
        setTimeout(function () {
          return polyfill$1(callback);
        }, 0);
      }
    };
  }();

  var index = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || polyfill$1;

  function getGeometry(target, isContainer) {
    /**
     * We want to ignore padding and scrollbars for container elements.
     * More information here: https://goo.gl/vOZpbz
     */
    var height = isContainer ? target.node.clientHeight : target.node.offsetHeight;
    var width = isContainer ? target.node.clientWidth : target.node.offsetWidth;
    var offsetTop = 0;
    var offsetLeft = 0;
    var node = target.node;

    do {
      if (!isNaN(node.offsetTop)) {
        offsetTop += node.offsetTop;
      }

      if (!isNaN(node.offsetLeft)) {
        offsetLeft += node.offsetLeft;
      }

      node = node.offsetParent;
    } while (node);

    return {
      bounds: {
        top: offsetTop,
        right: offsetLeft + width,
        bottom: offsetTop + height,
        left: offsetLeft
      },
      height: height,
      width: width
    };
  }

  function getScrolled(container) {
    var top, left;

    if (container.node === document.documentElement) {
      top = window.pageYOffset;
      left = window.pageXOffset;
    } else {
      top = container.node.scrollTop;
      left = container.node.scrollLeft;
    }

    return {
      top: top,
      left: left
    };
  }

  function isElementVisible(element) {
    if (element === void 0) element = {};
    var container = this.store.containers[element.containerId];

    if (!container) {
      return;
    }

    var viewFactor = Math.max(0, Math.min(1, element.config.viewFactor));
    var viewOffset = element.config.viewOffset;
    var elementBounds = {
      top: element.geometry.bounds.top + element.geometry.height * viewFactor,
      right: element.geometry.bounds.right - element.geometry.width * viewFactor,
      bottom: element.geometry.bounds.bottom - element.geometry.height * viewFactor,
      left: element.geometry.bounds.left + element.geometry.width * viewFactor
    };
    var containerBounds = {
      top: container.geometry.bounds.top + container.scroll.top + viewOffset.top,
      right: container.geometry.bounds.right + container.scroll.left - viewOffset.right,
      bottom: container.geometry.bounds.bottom + container.scroll.top - viewOffset.bottom,
      left: container.geometry.bounds.left + container.scroll.left + viewOffset.left
    };
    return elementBounds.top < containerBounds.bottom && elementBounds.right > containerBounds.left && elementBounds.bottom > containerBounds.top && elementBounds.left < containerBounds.right || element.styles.position === "fixed";
  }

  function delegate(event, elements) {
    var this$1 = this;
    if (event === void 0) event = {
      type: "init"
    };
    if (elements === void 0) elements = this.store.elements;
    index(function () {
      var stale = event.type === "init" || event.type === "resize";
      each(this$1.store.containers, function (container) {
        if (stale) {
          container.geometry = getGeometry.call(this$1, container, true);
        }

        var scroll = getScrolled.call(this$1, container);

        if (container.scroll) {
          container.direction = {
            x: mathSign(scroll.left - container.scroll.left),
            y: mathSign(scroll.top - container.scroll.top)
          };
        }

        container.scroll = scroll;
      });
      /**
       * Due to how the sequencer is implemented, it’s
       * important that we update the state of all
       * elements, before any animation logic is
       * evaluated (in the second loop below).
       */

      each(elements, function (element) {
        if (stale) {
          element.geometry = getGeometry.call(this$1, element);
        }

        element.visible = isElementVisible.call(this$1, element);
      });
      each(elements, function (element) {
        if (element.sequence) {
          sequence.call(this$1, element);
        } else {
          animate.call(this$1, element);
        }
      });
      this$1.pristine = false;
    });
  }

  function transformSupported() {
    var style = document.documentElement.style;
    return "transform" in style || "WebkitTransform" in style;
  }

  function transitionSupported() {
    var style = document.documentElement.style;
    return "transition" in style || "WebkitTransition" in style;
  }

  var version = "4.0.5";
  var boundDelegate;
  var boundDestroy;
  var boundReveal;
  var boundClean;
  var boundSync;
  var config;
  var debug;
  var instance;

  function ScrollReveal(options) {
    if (options === void 0) options = {};
    var invokedWithoutNew = typeof this === "undefined" || Object.getPrototypeOf(this) !== ScrollReveal.prototype;

    if (invokedWithoutNew) {
      return new ScrollReveal(options);
    }

    if (!ScrollReveal.isSupported()) {
      logger.call(this, "Instantiation failed.", "This browser is not supported.");
      return mount.failure();
    }

    var buffer;

    try {
      buffer = config ? deepAssign({}, config, options) : deepAssign({}, defaults, options);
    } catch (e) {
      logger.call(this, "Invalid configuration.", e.message);
      return mount.failure();
    }

    try {
      var container = tealight(buffer.container)[0];

      if (!container) {
        throw new Error("Invalid container.");
      }
    } catch (e) {
      logger.call(this, e.message);
      return mount.failure();
    }

    config = buffer;

    if (!config.mobile && isMobile() || !config.desktop && !isMobile()) {
      logger.call(this, "This device is disabled.", "desktop: " + config.desktop, "mobile: " + config.mobile);
      return mount.failure();
    }

    mount.success();
    this.store = {
      containers: {},
      elements: {},
      history: [],
      sequences: {}
    };
    this.pristine = true;
    boundDelegate = boundDelegate || delegate.bind(this);
    boundDestroy = boundDestroy || destroy.bind(this);
    boundReveal = boundReveal || reveal.bind(this);
    boundClean = boundClean || clean.bind(this);
    boundSync = boundSync || sync.bind(this);
    Object.defineProperty(this, "delegate", {
      get: function get() {
        return boundDelegate;
      }
    });
    Object.defineProperty(this, "destroy", {
      get: function get() {
        return boundDestroy;
      }
    });
    Object.defineProperty(this, "reveal", {
      get: function get() {
        return boundReveal;
      }
    });
    Object.defineProperty(this, "clean", {
      get: function get() {
        return boundClean;
      }
    });
    Object.defineProperty(this, "sync", {
      get: function get() {
        return boundSync;
      }
    });
    Object.defineProperty(this, "defaults", {
      get: function get() {
        return config;
      }
    });
    Object.defineProperty(this, "version", {
      get: function get() {
        return version;
      }
    });
    Object.defineProperty(this, "noop", {
      get: function get() {
        return false;
      }
    });
    return instance ? instance : instance = this;
  }

  ScrollReveal.isSupported = function () {
    return transformSupported() && transitionSupported();
  };

  Object.defineProperty(ScrollReveal, "debug", {
    get: function get() {
      return debug || false;
    },
    set: function set(value) {
      return debug = typeof value === "boolean" ? value : debug;
    }
  });
  ScrollReveal();
  return ScrollReveal;
});

(function ($) {
  var selectors = [];
  var checkBinded = false;
  var checkLock = false;
  var defaults = {
    interval: 250,
    force_process: false
  };
  var $window = $(window);
  var $priorAppeared = [];

  function isAppeared() {
    return $(this).is(":appeared");
  }

  function isNotTriggered() {
    return !$(this).data("_appear_triggered");
  }

  function process() {
    checkLock = false;

    for (var index = 0, selectorsLength = selectors.length; index < selectorsLength; index++) {
      var $appeared = $(selectors[index]).filter(isAppeared);
      $appeared.filter(isNotTriggered).data("_appear_triggered", true).trigger("appear", [$appeared]);

      if ($priorAppeared[index]) {
        var $disappeared = $priorAppeared[index].not($appeared);
        $disappeared.data("_appear_triggered", false).trigger("disappear", [$disappeared]);
      }

      $priorAppeared[index] = $appeared;
    }
  }

  function addSelector(selector) {
    selectors.push(selector);
    $priorAppeared.push();
  } // ":appeared" custom filter


  $.expr.pseudos.appeared = $.expr.createPseudo(function (_arg) {
    return function (element) {
      var $element = $(element);

      if (!$element.is(":visible")) {
        return false;
      }

      var windowLeft = $window.scrollLeft();
      var windowTop = $window.scrollTop();
      var offset = $element.offset();
      var left = offset.left;
      var top = offset.top;

      if (top + $element.height() >= windowTop && top - ($element.data("appear-top-offset") || 0) <= windowTop + $window.height() && left + $element.width() >= windowLeft && left - ($element.data("appear-left-offset") || 0) <= windowLeft + $window.width()) {
        return true;
      }

      return false;
    };
  });
  $.fn.extend({
    // watching for element's appearance in browser viewport
    appear: function appear(selector, options) {
      $.appear(this, options);
      return this;
    }
  });
  $.extend({
    appear: function appear(selector, options) {
      var opts = $.extend({}, defaults, options || {});

      if (!checkBinded) {
        var onCheck = function onCheck() {
          if (checkLock) {
            return;
          }

          checkLock = true;
          setTimeout(process, opts.interval);
        };

        $(window).scroll(onCheck).resize(onCheck);
        checkBinded = true;
      }

      if (opts.force_process) {
        setTimeout(process, opts.interval);
      }

      addSelector(selector);
    },
    // force elements's appearance check
    force_appear: function force_appear() {
      if (checkBinded) {
        process();
        return true;
      }

      return false;
    }
  });
})(function () {
  if (typeof module !== "undefined") {
    // Node
    return require("jquery");
  }

  return jQuery;
}());

function isAnyPartOfElementInViewport(el) {
  var rect = el.getBoundingClientRect();
  var windowHeight = window.innerHeight || document.documentElement.clientHeight;
  var windowWidth = window.innerWidth || document.documentElement.clientWidth; // http://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap

  var vertInView = rect.top <= windowHeight && rect.top + rect.height >= 0;
  var horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;
  return vertInView && horInView;
} // $.force_appear();


var delay = 100,
    duration = 600;
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll(".contacts-page").length > 0) {
    ScrollReveal({
      reset: true
    }).reveal(".main-callback,.main-feedback,.main-offices-list,.main-offices-text,.main-offices-title", {
      delay: delay,
      duration: duration
    });
  } else if (document.querySelectorAll(".internal__page").length > 0) {
    ScrollReveal({
      reset: true
    }).reveal("section p,section h4,section a,section img,.internal-banner", {
      delay: delay,
      duration: duration
    });
  } else if (document.querySelectorAll(".newsandblog").length > 0) {
    ScrollReveal({
      reset: true
    }).reveal(".filter,.blog-cards__item", {
      delay: delay,
      duration: duration
    }); // return;
  } else if (document.querySelectorAll(".team-page").length > 0) {
    ScrollReveal({
      reset: true
    }).reveal(".text h1,.text p,.navigation-panel,.block", {
      delay: delay,
      duration: duration
    });
  } else if (document.querySelectorAll(".casecards").length > 0 && !document.querySelector(".casecards.intern")) {
    return;
  } else if (document.querySelectorAll(".aboutUs").length > 0) {
    ScrollReveal({
      reset: true
    }).reveal("section:not(.awards),.awards__item", {
      delay: delay,
      duration: duration
    });
  } else {
    ScrollReveal({
      reset: true
    }).reveal("section", {
      delay: delay,
      duration: duration
    });
  }
});
// baner-slider
$(function () {
  if ($(".banner-slider").length > 0) {}

  $(".banner-slider").slick({
    slidesToShow: 1,
    autoplay: true,
    autoplaySpeed: 6000,
    dots: false,
    fade: true,
    prevArrow: '<div class="slick-prev"></div>',
    nextArrow: '<div class="slick-next"></div>'
  });
}); // company-slider

$(function () {
  $(".main-block__inner").slick({
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: false,
    fade: true,
    asNavFor: ".slider-block"
  });

  if ($(".slider-block").length > 0) {}

  if (window.innerWidth <= 480) {
    $(".slider-block").slick({
      slidesToShow: 3,
      slidesToScroll: 1,
      rows: 2,
      autoplay: false,
      dots: false,
      prevArrow: '<div class="slick-prev"></div>',
      nextArrow: '<div class="slick-next"></div>',
      asNavFor: ".main-block__inner",
      focusOnSelect: true,
      centerMode: true
    });
    return;
  }

  var sliderItem = document.querySelectorAll(".slider-block__item");
  $(".slider-block").slick({
    slidesToShow: sliderItem.length >= 10 ? 9 : sliderItem.length - 1,
    slidesToScroll: 1,
    autoplay: false,
    dots: false,
    prevArrow: '<div class="slick-prev"></div>',
    nextArrow: '<div class="slick-next"></div>',
    asNavFor: ".main-block__inner",
    focusOnSelect: true,
    centerMode: true,
    responsive: [{
      breakpoint: 1601,
      settings: {
        slidesToShow: sliderItem.length >= 10 ? 9 : sliderItem.length - 1
      }
    }, {
      breakpoint: 1201,
      settings: {
        slidesToShow: sliderItem.length >= 10 ? 9 : sliderItem.length - 1
      }
    }, {
      breakpoint: 1025,
      settings: {
        slidesToShow: sliderItem.length >= 10 ? 9 : sliderItem.length - 1
      }
    }, {
      breakpoint: 769,
      settings: {
        slidesToShow: sliderItem.length >= 7 ? 6 : sliderItem.length - 1
      }
    } // {
    //   breakpoint: 481,
    //   settings: {
    //     slidesToShow: sliderItem.length >= 10 ? 9 : sliderItem.length - 1
    //   }
    // }
    ]
  });
}); // description-slider

document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".sectors-oil, sectors-grid, sectors-generation, sectors-construction")) {
    var sliders = document.querySelectorAll(".sectors-description-slider__item").length;
    var counterSlider = document.querySelector(".counter-slider");
    counterSlider.innerHTML = sliders;
  }
});
$(function () {
  $(".sectors-description-img").slick({
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: false,
    fade: true,
    asNavFor: ".sectors-description-slider"
  });

  if ($(".sectors-description-slider").length > 0) {
    var descriptionSlider = $(".sectors-description-slider").slick({
      slidesToShow: 1,
      autoplay: false,
      dots: false,
      prevArrow: '<div class="slick-prev"></div>',
      nextArrow: '<div class="slick-next"></div>',
      asNavFor: ".sectors-description-img",
      focusOnSelect: true // responsive: [
      //   {
      //     breakpoint: 481,
      //     settings: {
      //       arrows: false
      //     }
      //   }
      // ]

    });
    descriptionSlider.on("afterChange", function (event, slick, currentSlide, nextSlide) {
      document.querySelectorAll(".sectors-description__counter span")[0].textContent = currentSlide + 1;
    });
  }
}); // news-slider

$(function () {
  if ($(".news-slider").length > 0) {}

  $(".news-slider").slick({
    slidesToShow: 3,
    slidesToScroll: 1,
    autoplay: false,
    dots: false,
    prevArrow: '<div class="slick-prev"></div>',
    nextArrow: '<div class="slick-next"></div>',
    responsive: [{
      breakpoint: 769,
      settings: {
        slidesToShow: 2
      }
    }, {
      breakpoint: 468,
      settings: {
        slidesToShow: 1
      }
    }]
  });
}); // blog-slider

$(function () {
  if ($(".blog-slider").length > 0) {}

  $(".blog-slider").slick({
    slidesToShow: 1,
    autoplay: true,
    autoplaySpeed: 6000,
    dots: false,
    fade: true,
    prevArrow: '<div class="slick-prev"></div>',
    nextArrow: '<div class="slick-next"></div>',
    responsive: [{
      breakpoint: 481,
      settings: {
        arrows: false
      }
    }]
  });
}); // casecards-slider

$(function () {
  if ($(".casecards-slider").length > 0) {}

  $(".casecards-slider").slick({
    slidesToShow: 1,
    autoplay: true,
    autoplaySpeed: 6000,
    dots: false,
    fade: true,
    prevArrow: '<div class="slick-prev"></div>',
    nextArrow: '<div class="slick-next"></div>',
    responsive: [{
      breakpoint: 481,
      settings: {
        arrows: false
      }
    }]
  });
}); //casecardsintern-slider

$(function () {
  if ($(".intern .slider").length > 0) {
    var length = $(".intern .slider .slider__block").length;
    document.querySelectorAll(".counter span")[1].textContent = length;
    var slider = $(".intern .slider-elm").slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      autoplay: false,
      dots: false,
      prevArrow: '<div class="slick-prev"></div>',
      nextArrow: '<div class="slick-next"></div>',
      responsive: [{
        breakpoint: 769,
        settings: {// slidesToShow: 2
        }
      }, {
        breakpoint: 468,
        settings: {// slidesToShow: 1
        }
      }]
    });
    slider.on("afterChange", function (event, slick, currentSlide, nextSlide) {
      document.querySelectorAll(".counter span")[0].textContent = currentSlide + 1;
    });
  }
}); // testimonials-slider

$(function () {
  if ($(".sectors-construction,.sectors-generation,.sectors-grid,.sectors-oil").length > 0) {
    $(".sectors-slider .wrapper").slick({
      slidesToShow: 1,
      autoplay: 6000,
      dots: false,
      prevArrow: '<div class="slick-prev"></div>',
      nextArrow: '<div class="slick-next"></div>'
    });
  } else if ($(".sectors-slider").length > 0) {
    $(".sectors-slider").slick({
      slidesToShow: 1,
      autoplay: 6000,
      dots: false,
      prevArrow: '<div class="slick-prev"></div>',
      nextArrow: '<div class="slick-next"></div>'
    });
  }
});
// document.addEventListener("DOMContentLoaded", function() {
//   if(document.querySelector(".homepage,.services-collection,.services,.sectors-oil,.sectors-grid,.sectors-construction,.sectors-generation")) {
//         let blockDescription = Array.from(document.querySelectorAll(".collection-block__description"))
//     let blockTab = Array.from(document.querySelectorAll(".select-block__item"))
//     let descriptionText = Array.from(document.querySelectorAll(".collection-block__text-animation"))
//     blockDescription.forEach((elem, i) => elem.setAttribute("data-tab", i))
//     blockTab.forEach((elem, i) => elem.setAttribute("data-tab", i))
//     descriptionText.forEach((elem, i) => elem.setAttribute("data-tab", i))
//     var selectedBlockDescription = '0';
//     var prevElem = bufferElem = nextElem = '0';
//     blockDescription.forEach(elem => { 
//       ( elem.getAttribute("data-tab" ) == selectedBlockDescription) ? elem.style.display = "block" : elem.style.display = "none"
//     })
//     scroll = ((100 / blockTab.length) + 0.1).toFixed(1);
//     scrollHeight = ((100 / blockTab.length) + 0.1).toFixed(1);
//     document.querySelector('.collection-scroll__thumb').style.height = `${scrollHeight}%`;
//     blockTab.forEach(elem => {
//       elem.addEventListener("click", () => {
//         prevElem = bufferElem;
//         nextElem = elem.getAttribute("data-tab");
//         bufferElem = nextElem;
//         selectedBlockDescription = elem.getAttribute("data-tab")
//         document.querySelector(".collection-scroll__thumb").style.top = "".concat(nextElem * scroll, "%");
//         blockDescription.forEach(elem => { 
//           ( elem.getAttribute("data-tab" ) == selectedBlockDescription) ? elem.style.display = "block" : elem.style.display = "none" 
//         })
//         descriptionText.forEach(elem => { 
//           if ( elem.getAttribute("data-tab" ) == selectedBlockDescription) {
//             if (prevElem < nextElem) {
//               elem.style.animation = "down 1s linear 0s 1 normal";
//               setTimeout(() => { elem.style.animation = "" }, 1000);
//             } else if (prevElem > nextElem) {
//               elem.style.animation = "up 1s linear 0s 1 normal";
//               setTimeout(() => { elem.style.animation = "" }, 1000);
//             }  
//           }
//         })
//       })
//     })
//   }
// })
// ie
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".homepage, .services-collection, .services, .sectors-oil, .sectors-grid, .sectors-construction, .sectors-generation")) {
    var blockDescription = Array.from(document.querySelectorAll(".collection-block__description"));
    var blockTab = Array.from(document.querySelectorAll(".select-block__item"));
    var descriptionText = Array.from(document.querySelectorAll(".collection-block__text-animation"));
    var readMoreBtn = Array.from(document.querySelectorAll(".read-more-button"));
    readMoreBtn.forEach(function (elem) {
      elem.addEventListener('click', function () {
        elem.style.display = "none";
        descriptionText.forEach(function (elem) {
          if (elem.getAttribute("data-tab") == selectedBlockDescription) {
            elem.style.maxHeight = "100000px";
            ScrollReveal().sync();
          }
        });
      });
    });
    blockDescription.forEach(function (elem, i) {
      return elem.setAttribute("data-tab", i);
    });
    blockTab.forEach(function (elem, i) {
      return elem.setAttribute("data-tab", i);
    });
    descriptionText.forEach(function (elem, i) {
      return elem.setAttribute("data-tab", i);
    });
    readMoreBtn.forEach(function (elem, i) {
      return elem.setAttribute("data-tab", i);
    });
    var selectedBlockDescription = '0';
    var prevElem = bufferElem = nextElem = '0';
    blockDescription.forEach(function (elem) {
      elem.getAttribute("data-tab") == selectedBlockDescription ? elem.style.display = "block" : elem.style.display = "none";
    });
    scroll = (100 / blockTab.length + 0.1).toFixed(1);
    scrollHeight = (100 / blockTab.length + 0.1).toFixed(1);
    document.querySelector('.collection-scroll__thumb').style.height = "".concat(scrollHeight, "%");
    blockTab.forEach(function (elem) {
      elem.addEventListener("click", function () {
        prevElem = bufferElem;
        nextElem = elem.getAttribute("data-tab");
        bufferElem = nextElem;
        selectedBlockDescription = elem.getAttribute("data-tab");
        document.querySelector(".collection-scroll__thumb").style.top = "".concat(nextElem * scroll, "%");
        blockDescription.forEach(function (elem) {
          elem.getAttribute("data-tab") == selectedBlockDescription ? elem.style.display = "block" : elem.style.display = "none";
        });
        descriptionText.forEach(function (elem) {
          if (elem.getAttribute("data-tab") == selectedBlockDescription) {
            if (prevElem < nextElem) {
              elem.style.animation = "down 0.7s linear 0s 1 normal";
              setTimeout(function () {
                elem.style.animation = "";
              }, 1000);
              ScrollReveal().sync();
            } else if (prevElem > nextElem) {
              elem.style.animation = "up 0.5s linear 0s 1 normal";
              setTimeout(function () {
                elem.style.animation = "";
              }, 1000);
              ScrollReveal().sync();
            }
          } else {
            elem.style.maxHeight = "135px";
            readMoreBtn.forEach(function (elem) {
              elem.style.display = "block";
            });
            ScrollReveal().sync();
          }
        });
        readMoreBtn.forEach(function (elem) {
          if (elem.getAttribute("data-tab") == selectedBlockDescription) {
            if (prevElem < nextElem) {
              elem.style.animation = "down 1s linear 0s 1 normal";
              setTimeout(function () {
                elem.style.animation = "";
              }, 1500);
              ScrollReveal().sync();
            } else if (prevElem > nextElem) {
              elem.style.animation = "up 1s linear 0s 1 normal";
              setTimeout(function () {
                elem.style.animation = "";
              }, 1000);
              ScrollReveal().sync();
            }
          }
        });
      });
    });
  }
});
// document.addEventListener("DOMContentLoaded", function() {
//   if (document.querySelector(".team-page")) {
//     document.querySelector(".button").classList.add("active-button");
//     document.querySelector(".block-with-employee").style.display = "flex";
//   }
//   if (document.querySelector(".newsandblog")) {
//     document
//       .querySelector(".filter-block__item")
//       .classList.add("active-button");
//     document.querySelector(".blog-cards").style.display = "block";
//   }
// });
// function openSelection(
//   evt,
//   blockThatNeedToOpen = "block-with-employee",
//   button = "active-button",
//   displayStyle = "flex"
// ) {
//   var i;
//   type = event.target.getAttribute("data-categories");
//   document.querySelector(`.${button}`).classList.remove(`${button}`);
//   if (evt.target.classList.contains(`${button}`))
//     evt.target.classList.remove(`${button}`);
//   else evt.target.classList.add(`${button}`);
//   var x = document.getElementsByClassName(`${blockThatNeedToOpen}`);
//   for (i = 0; i < x.length; i++) {
//     x[i].style.display = "none";
//   }
//   document.getElementById(type).style.display = displayStyle;
//   ScrollReveal().sync();
// }
// ie
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".team-page")) {
    document.querySelector(".button").classList.add("active-button");
    document.querySelector(".block-with-employee").style.display = "flex";
  }

  if (document.querySelector(".newsandblog")) {
    document.querySelector(".filter-block__item").classList.add("active-button");
    document.querySelector(".blog-cards").style.display = "block";
  }
});

function openSelection(evt) {
  var blockThatNeedToOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "block-with-employee";
  var button = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "active-button";
  var displayStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "flex";
  var i;
  type = event.target.getAttribute("data-categories");
  document.querySelector(".".concat(button)).classList.remove("".concat(button));
  if (evt.target.classList.contains("".concat(button))) evt.target.classList.remove("".concat(button));else evt.target.classList.add("".concat(button));
  var x = document.getElementsByClassName("".concat(blockThatNeedToOpen));

  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }

  document.getElementById(type).style.display = displayStyle;
  ScrollReveal().sync();
}
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelectorAll("section.animation").length > 0) {
    if (screen.availWidth >= 300) {
      var cn = new CanvasNest(document.querySelector("section.animation"), {
        color: "105,105,105",
        count: 90,
        zIndex: 5
      });
    }

    if (screen.availWidth >= 786) {
      var cn = new CanvasNest(document.querySelector("section.animation"), {
        color: "105,105,105",
        count: 200,
        zIndex: 5
      });
    }

    if (screen.availWidth >= 1366) {
      var cn = new CanvasNest(document.querySelector("section.animation"), {
        color: "105,105,105",
        count: 300,
        zIndex: 5
      });
    }
  }
});
document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".main-feedback")) {
    var renderer, scene, camera, ww, wh, particles;
    ww = window.innerWidth, wh = window.innerHeight;
    var centerVector = new THREE.Vector3(0, 0, 0);
    var previousTime = 0;

    var getImageData = function getImageData(image) {
      var canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0);
      return ctx.getImageData(0, 0, image.width, image.height);
    };

    var drawTheMap = function drawTheMap() {
      var geometry = new THREE.Geometry();
      var material = new THREE.PointsMaterial({
        size: 3,
        color: 0x313742,
        sizeAttenuation: false
      });

      for (var y = 0, y2 = imagedata.height; y < y2; y += 2) {
        for (var x = 0, x2 = imagedata.width; x < x2; x += 2) {
          if (imagedata.data[x * 4 + y * 4 * imagedata.width + 3] > 128) {
            var vertex = new THREE.Vector3();
            vertex.x = Math.random() * 1000 - 500;
            vertex.y = Math.random() * 1000 - 500;
            vertex.z = -Math.random() * 500;
            vertex.destination = {
              x: x - imagedata.width / 2,
              y: -y + imagedata.height / 2,
              z: 0
            };
            vertex.speed = Math.random() / 200 + 0.015;
            geometry.vertices.push(vertex);
          }
        }
      }

      particles = new THREE.Points(geometry, material);
      scene.add(particles);
      requestAnimationFrame(render);
    };

    var init = function init() {
      THREE.ImageUtils.crossOrigin = '';
      renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById("map"),
        antialias: true
      });
      renderer.setSize(ww, wh);
      renderer.setClearColor(0x282828);
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(50, ww / wh, 0.1, 10000);
      camera.position.set(-100, 0, 220);
      camera.lookAt(centerVector);
      scene.add(camera);
      texture = THREE.ImageUtils.loadTexture("https://s3-us-west-2.amazonaws.com/s.cdpn.io/127738/transparentMap.png", undefined, function () {
        imagedata = getImageData(texture.image);
        drawTheMap();
      });
      window.addEventListener('resize', onResize, false);
    };

    var onResize = function onResize() {
      ww = window.innerWidth;
      wh = window.innerHeight;
      renderer.setSize(ww, wh);
      camera.aspect = ww / wh;
      camera.updateProjectionMatrix();
    };

    var render = function render(a) {
      requestAnimationFrame(render);

      for (var i = 0, j = particles.geometry.vertices.length; i < j; i++) {
        var particle = particles.geometry.vertices[i];
        particle.x += (particle.destination.x - particle.x) * particle.speed;
        particle.y += (particle.destination.y - particle.y) * particle.speed;
        particle.z += (particle.destination.z - particle.z) * particle.speed;
      }

      if (a - previousTime > 100) {
        var index = Math.floor(Math.random() * particles.geometry.vertices.length);
        var particle1 = particles.geometry.vertices[index];
        var particle2 = particles.geometry.vertices[particles.geometry.vertices.length - index];
        TweenMax.to(particle, Math.random() * 2 + 1, {
          x: particle2.x,
          y: particle2.y,
          ease: Power2.easeInOut
        });
        TweenMax.to(particle2, Math.random() * 2 + 1, {
          x: particle1.x,
          y: particle1.y,
          ease: Power2.easeInOut
        });
        previousTime = a;
      }

      particles.geometry.verticesNeedUpdate = true;
      camera.position.x = Math.sin(a / 5000) * 100;
      camera.lookAt(centerVector);
      renderer.render(scene, camera);
    };

    init();
  }
});